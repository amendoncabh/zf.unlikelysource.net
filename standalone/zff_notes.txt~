Action Helpers: http://mwop.net/blog/246-Using-Action-Helpers-To-Implement-Re-Usable-Widgets.html
Bootstrap Resource Plugins: http://mwop.net/blog/231-Creating-Re-Usable-Zend_Application-Resource-Plugins.html

http://zf.unlikelysource.net/etherpad/pad/index/pad/ZFF1

Cloud Issues:
https://getsatisfaction.com/zend_technologies/
http://app.news.zend.com/e/es.aspx?s=714&e=312545&elq=6178c1e6f13a4b14a3e4fe7855fe41ce

Recent Webinars:
http://www.zend.com/en/webinar/Framework/70170000000baeD-webinar-zf-filters-the-secure-mans-best-friend-20110720.flv
http://www.zend.com/en/webinar/Framework/70170000000bZAq-webinar-creating-acl-in-zf-20110615.flv
http://www.zend.com/en/webinar/Framework/70170000000bWab-ZF-Grips-a-20111003.flv

TYPOS:
088 -----------------------------------------------------------------------------
Title "Example: Zend_Config_Ini"

Either add this line in the beginning of the code block:
$options['sectionSeparator'] = '.';
-- or --
Change line 12 of the 2nd code block from this:
[staging . production]

to this:
[staging : production]



ZEND FRAMEWORK FUNDAMENTALS CLASS NOTES -----------------------------------------

Q: What is the latest news on ZF 2?
A: FOR INFO on ZF2: http://framework.zend.com/zf2/blog

Problem running Zend_Tool inside ZS: cannot allocate memory

Tutorials:
http://www.developertutorials.com/tutorials/php/zend-framwork-tutorial-8-08-13/page1.html
http://akrabat.com/zend-framework-tutorial/ <-- more up to date (i.e. ZF 1.10)
http://www.slideshare.net/weierophinney/zendform-presentation

Virtual Hosts:
http://foundationphp.com/tutorials/apache22_vhosts.php

SLIDE NOTES: Zend Framework Foundations

004 -------------------------------------------------------------------------------
NOTE: guestbook and wikiapp are code complete.  When you do your own coding, create a new project guestbook.work (and later) wikiapp.work.  Use the code complete versions for reference.
If you want to use these apps outside of the VM, ask me for a zip file of the code.  Make sure
you grant sufficient rights to the /application/data/ and /application/data/logs/ directories.

008 -------------------------------------------------------------------------------
Google calendar integration
Google Data APIs: 
- http://framework.zend.com/download/gdata
- http://code.google.com/apis/gdata/index.html
Adobe: Adobe Message Format = Flex and AIR app support
- http://framework.zend.com/download/amf
Microsoft: Infocard / Windows Cardspace
- http://framework.zend.com/download/infocard
At Will Approach:
http://www.slideshare.net/shahar/zend-framework-components-for-nonframework-use
Zend_Service:
Google, Amazon.com, Yahoo, Slideshare, Flickr, Nirvanix, OpenID, StrikeIron, Akismet, Technorati
Sometimes Emulates PEAR: i.e. PEAR has Text_CAPTCHA, ZF has Zend_Captcha

009 -------------------------------------------------------------------------------
BSD License: http://www.opensource.org/licenses/bsd-license.php
Apache ICLA: 
http://www.apache.org/licenses/
http://www.apache.org/licenses/icla.txt

012 -------------------------------------------------------------------------------
Zend_Tool =  Creates the project skeleton
Zend_Application = The core of the application (see index.php)

019 -------------------------------------------------------------------------------
WARNING: Zend Framework 1.10.7 Full gz = 17.99 M (unzipped 64 M)
	 Zend Framework 1.10.6 Minimal gz = 3.44 M
The Zend Server CE download includes ZF Full by default (does NOT include MySql)
Full Version adds this to minimal version:
Dojo toolkit, Demos, Examples and Tests

021 -------------------------------------------------------------------------------
Show /usr/local/zend/share/ZendFramework/bin
or Windows: C:\Program Files\ZendServer\bin\
Docs: http://framework.zend.com/manual/en/zend.tool.framework.clitool.html
NOTE: s/be "http://pear.zfcampus.org/"
Installation of the channel: "pear install zfcampus/zf"
VM DEMO: "zf --help"

CODEBREAK: DAY ONE HELLO WORLD PROJECT SETUP

Allocate 1G of RAM to the VM:
1. If the VM was running but suspended, be sure to do a proper shutdown of the VM 
   by pressing the red "power" button and selecting "Shutdown"
2. From the VM menu reconfigure the VM for 1G of RAM:
   A. Edit Virtual Machine Settings
   B. Hardware - Memory
   C. Memory for this virtual machine: 1G (or more if you have > 2 GB of RAM on your host)
3. Save

Confirm that an Apache vhost file exists for helloworld:
1.	ls -l /etc/apache2/sites-available
	ls -l /etc/apache2/sites-enabled
	Do you see an entry "helloworld"?
2.	Confirm that a hosts file entry exists for helloworld
	cat /etc/hosts
	Do you see an entry "helloworld" which is assigned to 127.0.0.1?

From Zend Studio inside the VM:
3.	Go to the PHP explorer (left column) and "open" the helloworld project
	Click on it and then select Project - Open Project
4.	Delete the project (since we'll be re-creating it)
	Edit - Delete
	Select "Delete project contents on disk"
5.	Switch workspace to /workspace:
	File - Switch Workspace - Other
6.	You are now ready to create a new project (next)

CREATE LINK TO Zend Tool:
1.    	Open a command shell
2.	sudo ln -s /usr/local/zend/share/ZendFramework/bin/zf.sh /usr/bin/zf

	
023 -------------------------------------------------------------------------------
CODEBREAK: CREATE PROJECT
Create project from command line or from Zend Studio

From the command line: 
1.    cd /workspace first
2.    zf create project helloworld
3.    If you see any startup errors, check the virtual host file for errors
4.    Import into Zend Studio:
      From ZS: File - New - Zend Framework Project - Zen Framework EMPTY PROJECT

From Zend Studio:
1.    File - New - Zend Framework Project - helloworld

Test in the browser: http://helloworld/


NOTE: 
If you use Zend Tool from the command line, make sure you do REFRESH  Zend Studio!

025 -------------------------------------------------------------------------------
NOTE: not "library/Zend/directory"!  I.e.:
ln -s /usr/local/zend/share/ZendFramework/library/Zend /var/www/helloworld/library/Zend
In ZS look at "PHP Include Path" / "Zend Framework Library"
WARNING: Zend Studio will have to index all the files in the library -- could take awhile

027 -------------------------------------------------------------------------------
You can add any initial code here
If you name function "_initXXX" substitute for "XXX" and it will run automatically

029 -------------------------------------------------------------------------------
Q: How do you view hidden files in ZS?
A: Click on triangle at the top of the PHP explorer; Select Filters; Uncheck ".* resources"
APPLICATION_ENV is set here for development, testing or production (see #30)
RewriteEngine = http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html
%{SERVER VARIABLE}
-s = T if regular file which exists and is non-zero size
-l = T if same but specifically symbolic link
-d = T if same but specifically directory
"^.*$" = any character
-  = no substitution
NC = no case (i.e. case insensitive)
L  = last rule (like a "break" statement)
This is executed if the RewriteCond's are true:
RewriteRule ^.*$ - [NC,L]
This is execute if  RewriteCond's are false:
RewriteRule ^.*$ index.php [NC,L]
This technology lets ZF utilize "SEO Friendly" URLs
i.e. demo "http://wikiapp/article/view/title/FooBar"
IMPORTANT: you need to add "RewriteBase /xxx/yyy" if your URL is not mapped to public!!!
TIPS:
1.	Sometimes you need to set "RewriteBase /"
2.	Some ISPs (i.e. 1&1) need you to disable "MultiViews" -- i.e. "-MultiViews"
ZF WITHOUT MOD_REWRITE:
http://akrabat.com/zend-framework/zend-framework-urls-without-mod_rewrite/

030 -------------------------------------------------------------------------------
You need to set the DOCUMENT_ROOT to AppName/Public
index.php is executed first
Question for class: where does APPLICATION_ENV come from?
NOTICE:
line 21: instantiates Zend_Application
line 25: uses "fluent" interface

032 -------------------------------------------------------------------------------

033 -------------------------------------------------------------------------------
Q:	How can we deliberately invoke the error controller?
A: 	http://helloworld/error/error
VIEW: 	ErrorController.php

035 -------------------------------------------------------------------------------
CODEBREAK: ASSIGN HELLOWORLD TO THE VIEW AND ECHO
1.	Add this code to indexAction() in IndexController.php:
	$this->view->xyz = "Hello World";
2.	Add this code to application/views/scripts/index/index.phtml:
	<h1><?php echo $this->xyz; ?></h1>
3.	Test URL:
	http://helloworld/

037 -------------------------------------------------------------------------------

038 -------------------------------------------------------------------------------
Modify .htaccess
Switch from "development" to "production"
error.phtml looks for "development"
See notes above for #029

040 -------------------------------------------------------------------------------
Webinar: http://www.slideshare.net/ralphschindler/zendtool-in-zf-18-webinar

041 -------------------------------------------------------------------------------
Registry:
Because providers and manifests may come from anywhere in the include_path, a registry is provided to simplify access to the various pieces of the toolchain. This registry is injected into registry-aware components, which may then pull dependencies from them as necessary. Most dependencies registered with the registry will be sub-component-specific repositories. 

Providers:
Zend_Tool_Framework_Provider represents the functional or "capability" aspect of the framework. Fundamentally, Zend_Tool_Framework_Provider will provide the interfaces necessary to produce "providers", or bits of tooling functionality that can be called and used inside the Zend_Tool_Framework toolchain. The simplistic nature of implementing this provider interface allows the developer a "one-stop-shop" of adding functionality or capabilities to Zend_Tool_Framework. 

DEMO: 	zf --help 
	// shows providers

Loaders:
The purpose of a Loader is to find Providers and Manifest files that contain classes which implement either Zend_Tool_Framework_Provider_Interface or Zend_Tool_Framework_Manifest_Interface. Once these files are found by a loader, providers are loaded into the Provider Repository and manifest metadata is loaded into the Manifest Repository. 

Manifests:
n short, the Manifest shall contain specific or arbitrary metadata that is useful to any provider or client, as well as be responsible for loading any additional providers into the provider repository. 
Clients:
Clients are the interface which bridges a user or external tool into the Zend_Tool_Framework system. Clients can come in all shapes and sizes: RPC endpoints, Command Line Interface, or even a web interface. Zend_Tool has implemented the command line interface as the default interface for interacting with the Zend_Tool_Framework system. 

DEMO: 	cd /workspace/helloworld
	zf show manifest

043 -------------------------------------------------------------------------------
The Zend_Application_Bootstrap_BootstrapAbstract  implementation provides a simple convention for defining class resource methods. Any protected method beginning with a name prefixed with _init will be considered a resource method.

CODEBREAK: BOOTSTRAP INDIVIDUAL ITEMS
1.	Open Bootstrap.php
2.	Create:
	function _initFoo() { echo "<br />Foo\n"; }
	function _initBar() { echo "<br />Bar\n"; }
	function Baz() { echo "<br />Bat\n"; }
	function _initBaz() { echo "<br />Baz\n"; echo "<br />\n"; var_dump($this); }
3.	TEST 
	(http://helloworld/ from browser)
4.	Modify last line of index.php:
	$application->getBootstrap()->bootstrap('bar');
	TEST
5.	Modify last line of index.php:
	$application->getBootstrap()->bootstrap(array('bar','baz'));
	TEST
6.	Change everything back to where it was before!!!

045 -------------------------------------------------------------------------------
Differentiate betw/ bootstrap and bootstrap_bootstrap:
DEMO: library/Zend/Application/Bootstrap.php
4.5.5. Zend_Application_Bootstrap_Bootstrap
Concrete implementation of Zend_Application_Bootstrap_BootstrapAbstract. Its primary feature are that it registers the Front Controller resource, and that the run() method first checks that a default module is defined and then dispatches the front controller. 
4.5.2. Zend_Application_Bootstrap_Bootstrapper
Base interface all bootstrap classes must implement
REF: http://framework.zend.com/manual/en/zend.application.core-functionality.html

046 -------------------------------------------------------------------------------
Zend_Application_Bootstrap_Bootstrapper is the base interface all bootstrap classes must implement. The base functionality is aimed at configuration, identifying resources, bootstrapping (either individual resources or the entire application), and dispatching the application. 
REF: http://framework.zend.com/manual/en/zend.application.core-functionality.html

047  -------------------------------------------------------------------------------
Go through path code takes:
.htaccess - index.php - application.ini - Bootstrap.php

CODEBREAK #2: BOOTSTRAP INDIVIDUAL ITEMS
1.    Open Bootstrap.php
2.    Create:
    function _initFoo() { echo "<br />Foo\n"; }
    function _initBar() { echo "<br />Bar\n"; }
    function _initBaz() { echo "<br />Baz\n"; echo "<br />\n"; var_dump($this); }
    function bat() { echo "<br />Bat\n"; }
    
3.    TEST 
    (http://helloworld/ from browser)
4.    Modify last line of index.php:
    $application->getBootstrap()->bootstrap('bar');
    TEST
5.    Modify last line of index.php:
    $application->getBootstrap()->bootstrap(array('bar','baz'));
    TEST
6.    Change everything back to where it was before!!!


CODEBREAK #3: reading an application.ini parameter
1.    Modify application.ini.  
    Add a parameter under [production]:
    new.default = "TEST"
2.    Choose a controller and add an action "appiniAction()"
    Add code to retrieve config parameters:
    $this->view->config = $this->getFrontController()->getParam('bootstrap')->getOptions();
3.    Modify the view script and echo the "new" parameter
    <?php Zend_Debug::dump($this->config) ?>
    <?php echo $this->config['new']['default']?>


048 -------------------------------------------------------------------------------
Zend_Application_Bootstrap = include_paths, php.ini settings, etc.
2 bootstraps = added flexibility
Used for different implementations of same code block
I.e. change from database to web service layer
Not 2 classes -- it's a HIERARCHY
If you only need a "lite" version, don't use the additional layer
Configuration by array:
$application = new Zend_Application(APPLICATION_ENV, array(
    'pluginPaths' => array(
        'My_Resource' => APPLICATION_PATH . '/resources/',
    ),
    'resources' => array(
        'FrontController' => array(
            'controllerDirectory' => APPLICATION_PATH . '/controllers',
        ),
    ),
));
Configuration by file (see index.php & application.ini)

049 -------------------------------------------------------------------------------
DEMO: API docs for Zend_Application_Bootstrap_Bootstrapper

050 -------------------------------------------------------------------------------
Currently available resources:
Zend_Application_Resource_Cachemanager
Zend_Application_Resource_Db
Zend_Application_Resource_Dojo
Zend_Application_Resource_Exception
Zend_Application_Resource_Frontcontroller
Zend_Application_Resource_Layout
Zend_Application_Resource_Locale
Zend_Application_Resource_Log
Zend_Application_Resource_Mail
Zend_Application_Resource_Modules
Zend_Application_Resource_Multidb
Zend_Application_Resource_Navigation
Zend_Application_Resource_Resource
Zend_Application_Resource_ResourceAbstract
Zend_Application_Resource_Router
Zend_Application_Resource_Session
Zend_Application_Resource_Translate
Zend_Application_Resource_View
-- or -- ROLL YOUR OWN :-)
REF: http://framework.zend.com/manual/en/zend.application.available-resources.html
     Also show API docs

051 -------------------------------------------------------------------------------
Provides for "lazy loading"
No need to check to see if class exists
Zend_Loader vs. require_once()

The Zend_Loader methods are best used if the filename you need to load is variable. For example, if it is based on a parameter from user input or method argument. If you are loading a file or a class whose name is constant, there is no benefit to using Zend_Loader over using traditional PHP functions such as require_once(). 
(see: http://akrabat.com/php/zend_loaders-autoloader_deprecated-in-zend-framework-18/)

DEMO:
guestbook - Application - Bootstrap.php - _initAutoload()

52 -------------------------------------------------------------------------------
Note: ZF doesn't provide any default models!

NOTE: Joomla (among others) uses MVC also
REF: http://www.joomla.org/about-joomla.html
     http://www.joomla.org/images/stories/mvc_diagram.png

056 -------------------------------------------------------------------------------
Views - provides for multiple outputs, i.e. mobile phone + web browser

057 -------------------------------------------------------------------------------
Model - abstractions of something real
Could be a user: different model for different roles
The model is not just the database
Normally: controller pulls data from the model and presents it to the view
What if different users need different views?
Application logic should go into the controller, not the view or model
If you need to turn off parts of the template, use view helpers

059 -------------------------------------------------------------------------------
If you want, drop "Model" and "View" and just use "Controller"
But this will limit future development and expansion

060 -------------------------------------------------------------------------------
Program flow: everything starts in public/index.php
Note: you should set document root to the public directory
Later: will have multiple controllers which pass off to each other
(If you skipped codebreak for #35:)
CODEBREAK:
1.	Add this code to indexAction() in IndexController.php:
	$this->view->xyz = "Hello World";
2.	Add this code to application/views/scripts/index/index.phtml:
	<h1><?php echo $this->xyz; ?></h1>
3.	Test URL:
	http://helloworld/

061 -------------------------------------------------------------------------------
This mechanism needs mod_rewrite to prevent an error as URL <> dir structure!
For parameters mapping see WikiApp - ArticleController:
URL: http://wikiapp/article/view/title/help
$request      = $this->getRequest();
$title        = $request->getParam('title');
Parameter = "title"
Value = "help"

CODEBREAK #4: CREATE NEW CONTROLLER
Create a "demo" controller
1.    From the command line of the VM:
    cd /workspace/helloworld
    zf create controller demo
    (or wherever you created your helloworld project -- 
    could be /var/www/helloworld)
    -- or --
    From Zend Studio:
    File - New - ZendFramework Item - Controller
2.    In VM browser test this URL: 
    http://helloworld/demo/index


CODEBREAK #5: Read parameters from the URL
Create a "test" action in the index controller
1.    From the command line of the VM:
    cd /workspace/helloworld 
    zf create action test index
    (or wherever you created your helloworld project -- 
    could be /var/www/helloworld)
    -- or --
    From Zend Studio:
    Project - Zend Tool
    cd helloworld
    zf create action test index
2.    In VM browser test this URL: 
    http://helloworld/index/test
3.    From ZS do a refresh and then view IndexController.php
4.    Add code to testAction(): 
    echo $this->getRequest()->getParam("hello");
5.    From browser test this URL:
    http://helloworld/index/demo/hello/Hello%20World
6.    Question: can you echo directly from a controller?    
       What is the best practice?


062 -------------------------------------------------------------------------------
Action Controller = any additional controllers you create to handle additional 
or complex business logic.  I.e. GuestbookController.php

065 -------------------------------------------------------------------------------
Take the attendees through the actual application - each page and link
This is available as a tutorial (ZF Quickstart) at:
http://framework.zend.com/docs/quickstart
Ques for class:
What does the following imply?
http://guestbook/guestbook
http://guestbook/guestbook/sign

070 -------------------------------------------------------------------------------
Plugins: can kick in at any of 6 points in the execution of the app; example: ErrorHandler; 
Plugins are used in a variety of places:
    * Zend_Application: resources. (see slide #50)
    * Zend_Controller_Action: action helpers.
    * Zend_Feed_Reader: plugins.
    * Zend_Form: elements, filters, validators, and decorators.
    * Zend_View: view helpers.

Action Helpers: augment the logic of an action controller; 
	useful when you've got common code between controllers; example: ViewRenderer
	See: http://framework.zend.com/manual/1.10/en/zend.controller.actionhelpers.html
Zend Framework includes several action helpers by default: AutoComplete for automating responses for AJAX  autocompletion; ContextSwitch and AjaxContext for serving alternate response formats for your actions; a FlashMessenger for handling session flash messages; Json for encoding and sending JSON  responses; a Redirector, to provide different implementations for redirecting to internal and external pages from your application; and a ViewRenderer to automate the process of setting up the view object in your controllers and rendering views. 

Last point should read "Developer does NOT have to ... "
Zend_Application_Resource_Frontcontroller
http://framework.zend.com/manual/en/zend.application.available-resources.html#zend.application.available-resources.frontcontroller

071 -------------------------------------------------------------------------------
Frontcontroller: implements the Singleton pattern
Plugin broker: The controller architecture includes a plugin system that allows user code to be called when certain events occur in the controller process lifetime. The front controller uses a plugin broker as a registry for user plugins, and the plugin broker ensures that event methods are called on each plugin registered with the front controller. 
Under guestbook, show students where Front Controller is activated:
index.php calls bootstrap()->run()
PHP Include Path 
  - Zend Framework Library 
    - Zend 
      - Application 
        - Bootstrap 
          - Bootstrap.php - run()

NOTE:
// Disable the ErrorHandler plugin:
$front->setParam('noErrorHandler', true);
// Disable the ViewRenderer helper:
$front->setParam('noViewRenderer', true);

072 -------------------------------------------------------------------------------
Zend_Controller_Front primary methods:

- getInstance() is used to retrieve a front controller instance
- setControllerDirectory() is used to tell the dispatcher  where to look for action controller  class files. It accepts either a single path or an associative array of module/path pairs. 
- addControllerDirectory() - adds to the above
- addModuleDirectory() allows you to pass the name of a directory containing one or more module directories. It then scans it and adds them as controller directories to the front controller.
Later, if you want to determine the path to a particular module or the current module, you can call 
- getModuleDirectory(), optionally passing a module name to get that specific module directory. 
- dispatch(Zend_Controller_Request_Abstract $request = null, Zend_Controller_Response_Abstract $response = null)
- Zend_Controller_Front::run($path)

Configuring via application.ini
REF: http://framework.zend.com/wiki/display/ZFPROP/Zend_Application+-+Bill+Karwin

CODEBREAK: Track the Front Controller
Modify helloworld:
1.	Add this to INDEX.PHP before $application->bootstrap()->run():
	Zend_Debug::dump(Zend_Controller_Front::getInstance(), "INDEX.PHP");
2.	Add this to Bootstrap.php:
	public function _initTest() 
	{
		Zend_Debug::dump(Zend_Controller_Front::getInstance(), "BOOTSTRAP");
	}
	public function _initXyz()
	{
		$this->test = "TEST";
	}
3.	Add this to IndexController.php:
	public function indexAction()
	{
		Zend_Debug::dump(Zend_Controller_Front::getInstance(), "INDEX CONTROLLER");
		exit;
	}
4.	Test in your browser
5.	What is your conclusion?
6.	NOTE: in the last dump (INDEX CONTROLLER), look for "xyz" under "_classResources"
	NOTE: have a look at "_resourceTypes".  You will see these mappings in action later in the course.

073 -------------------------------------------------------------------------------
Zend_Controller_Request:
The request object is a simple value object that is passed between Zend_Controller_Front and the router, dispatcher, and controller classes. It packages the names of the requested module, controller, action, and optional parameters, as well as the rest of the request environment, be it HTTP, the CLI, or PHP-GTK.

The request object is a container for the request environment. The controller chain really only needs to know how to set and retrieve the controller, action, optional parameters, and dispatched status. By default, the request will search its own parameters using the controller or action keys in order to determine the controller and action.

Zend_Controller_Router:
Zend_Controller_Router_Rewrite is the standard framework router. Routing is the process of taking a URI endpoint (that part of the URI which comes after the base URL) and decomposing it into parameters to determine which module, controller, and action of that controller should receive the request. This values of the module, controller, action and other parameters are packaged into a Zend_Controller_Request_Http object which is then processed by Zend_Controller_Dispatcher_Standard. Routing occurs only once: when the request is initially received and before the first controller is dispatched.

Zend_Controller_Dispatcher:
Dispatching is the process of taking the request object, Zend_Controller_Request_Abstract, extracting the module name, controller name, action name, and optional parameters contained in it, and then instantiating a controller and calling an action of that controller.

Dispatching happens in a loop in the front controller. Before dispatching occurs, the front controller routes the request to find user specified values for the module, controller, action, and optional parameters. It then enters a dispatch loop, dispatching the request.

At the beginning of each iteration, it sets a flag in the request object indicating that the action has been dispatched. If an action or pre or postDispatch plugin resets that flag, the dispatch loop will continue and attempt to dispatch the new request. By changing the controller and/or action in the request and resetting the dispatched flag, the developer may define a chain of requests to perform. 

074 -------------------------------------------------------------------------------
Zend_Controller_Action is an abstract class you may use for implementing Action Controllers for use with the Front Controller when building a website based on the Model-View-Controller (MVC) pattern.
DEMO: show IndexController.php; note that it extends Zend_Controller_Action

The response object is the logical counterpart to the request object. Its purpose is to collate content and/or headers so that they may be returned en masse. Additionally, the front controller will pass any caught exceptions to the response object, allowing the developer to gracefully handle exceptions.

Example usage:
/ Within an action controller action:
// Set a header
$this->getResponse()
    ->setHeader('Content-Type', 'text/html')
    ->appendBody($content);

The controller architecture includes a plugin system that allows user code to be called when certain events occur in the controller process lifetime. The front controller uses a plugin broker as a registry for user plugins, and the plugin broker ensures that event methods are called on each plugin registered with the front controller. 

Plugin Example:
* look at the Error Controller

Zend_Controller_Plugin_Abstract
* routeStartup() is called before Zend_Controller_Front calls on the router to evaluate the request against the registered routes.
* routeShutdown() is called after the router finishes routing the request.
* dispatchLoopStartup() is called before Zend_Controller_Front enters its dispatch loop.
* preDispatch() is called before an action is dispatched by the dispatcher. This callback allows for proxy or filter behavior. By altering the request and resetting its dispatched flag (via Zend_Controller_Request_Abstract::setDispatched(false)), the current action may be skipped and/or replaced.
* postDispatch() is called after an action is dispatched by the dispatcher. This callback allows for proxy or filter behavior. By altering the request and resetting its dispatched flag (via Zend_Controller_Request_Abstract::setDispatched(false)), a new action may be specified for dispatching.
* dispatchLoopShutdown() is called after Zend_Controller_Front exits its dispatch loop.
Standard Usage:
$front = Zend_Controller_Front::getInstance();
$front->registerPlugin(new Zend_Controller_Plugin_ErrorHandler());

080 -------------------------------------------------------------------------------
Controller: form validation
init() is part of the framework
__construct() is part of PHP

082 -------------------------------------------------------------------------------
$this->_forward('action','controller','module',array());
Make sure that you specify a "return" in the method calling the forward
Otherwise that method will complete before the forward method runs
SEE: slide #87

083 -------------------------------------------------------------------------------
Request and Response are objects which are created by dispatch process
$request = cookies, GET, POST, etc.
$response = headers, response code
$this->getRequest() = returns instance of request object
$this->getResponse() = returns instance of response object
(See errorController.php)
(See slide 87)

084 -------------------------------------------------------------------------------
DEMO: guestbook - application - controllers - GuestbookController.php
public function signAction() { $request = $this->getRequest(); ...

Docs: 10.4.2: Zend_Controller_Request_Http
order of precedence: 1. GET, 2. POST, 3. COOKIE, 4. SERVER, 5. ENV.
getParam() = $_REQUEST[]
To check on source: getMethod() isGet() isPost() isHead() etc.

085 -------------------------------------------------------------------------------
Docs 10.9.2 - Header Manipulation
$front->dispatch();
$response = $front->getResponse();
// Or, have the front controller dispatch() process return it
$front->returnResponse(true);
$response = $front->dispatch();

// do some processing...

// finally, echo the response 
$response->sendResponse();

setHeader($name, $value, $replace = false) is used to set an individual header. By default, it does not replace existing headers of the same name in the object; however, setting $replace to true will force it to do so. 
setRedirect($url, $code = 302) sets an HTTP Location header for a redirect. If an HTTP status code has been provided, it will use that status code. 
etc.

086 -------------------------------------------------------------------------------
preDispatch() and postDispatch() = each runs only once for each action
Q: Why would you put something in preDispatch() rather than init()?
Ans: init() happens only once per instantiation of a class whereas preDispatch happens before each action method (i.e. if you've got a dispatch loop set up); init() is primarily intended for extending the constructor.

CODEBREAK: preDispatch() and postDispatch()

1.  In helloworld create a new controller dispatch
2.  Add the following methods to DispatchController.php
    public function init() {  echo "<br />Init\n"; }
    public function preDispatch() { echo "<br />Pre Dispatch\n"; }
    public function postDispatch() { echo "<br />Post Dispatch\n"; }
3.  TEST: http://helloworld/dispatch
4.  Create an action in the dispatch controller called "test"
5.  Add this code to indexAction():
        echo '<br />Before Forward';
    	$this->_forward("test","dispatch");
        echo '<br />After Forward';
6.  TEST: http://helloworld/dispatch
7.  What is the difference in output?

Q: Does __redirect() work like __forward() in that the remaining code executes before doing the redirect?
A: No.  Add this test code to indexAction():
        echo '<br />Before Redirect';
    	$this->_redirect("http://wikiapp/");
        echo '<br />After Redirect';
   TEST: http://helloworld/dispatch

Q: What is your conclusion about the wisdom of only outputting from the view?

087 -------------------------------------------------------------------------------
PHP Include Path 
  - Zend Framework Library 
    - Zend 
      - Controller
        - Front.php (for example) 

Zend_Controller_Request_Http has a rudimentary method for detecting AJAX requests: isXmlHttpRequest(). This method looks for an HTTP request header X-Requested-With with the value 'XMLHttpRequest'; if found, it returns true.

Currently, this header is known to be passed by default with the following JS libraries:
* Prototype/Scriptaculous (and libraries derived from Prototype)
* Yahoo! UI Library
* jQuery
* MochiKit

Most AJAX libraries allow you to send custom HTTP request headers; if your library does not send this header, simply add it as a request header to ensure the isXmlHttpRequest() method works for you. 

Q: Where do you find the various methods accessible from the controller?
A: API docs -> Zend_Controller
Q: Where do you find methods for Request and Response objets?
A: $this->getRequest() = returns a Zend_Controller_Request_Http object; then look in the API docs under Zend_Controller - Request
   $this->getResponse() = returns a Zend_Controller_Response_Http object; then look in the API docs under Zend_Controller - Response

088 -------------------------------------------------------------------------------
Solid arrowheads = exec flow
Empty arrowheads = exec flows which you can tap into

089 -------------------------------------------------------------------------------
CODEBREAK: Controller Chaining using _forward() vs. _redirect()
1.	In helloworld create a new action for IndexController called "next"
2.	Modify IndexController.php - indexAction() as follows:
	$this->view->before = "<br />BEFORE\n";
        $this->_forward("next","index");
	$this->view->after = "<br />AFTER\n";
3.	Modify the view script for the index action as follows:
	echo $this->before;
	echo $this->after;
4.	Test the results (should be the same)
	http://helloworld/index/next
	http://helloworld/index/index
5.	Does "AFTER" appear?  Why or why not?
6.	Create a new controller DemoController
7.	Create a new action for IndexController called "demo"
8.	Have demoAction forward to the index action for new controller
9.	Test the results (should be the same)
	http://helloworld/index/demo
	http://helloworld/demo

091 -------------------------------------------------------------------------------
CODEBREAK: CODE GUESTBOOK.WORK
1.	Create the ZF project guestbook.work
2.	Create additional controller(s) as needed
3.	Create additional action(s) as needed
4.	Verify the the project document root is guestbook.work/public in 
	the vhost file /etc/apache2/sites-available/guestbook.work
5.	Test and debug

Q: does case matter in the naming of the controller???
A: by default ZF expects TitleCaseController names
i.e. http://example.org/forwarddemo = ForwarddemoController.php
Q: does case in the URL matter
A: No -- everything gets converted to all lowercase in processing
NOTE: when you create controllers, if you choose "Template Based" ZS puts in all the "require_once" etc.  Lets you run the code outside of ZS.  Autoloading should take care of this though.
Look in the ZF manual appendix under "Performance" for discussion
NOTE: corresponds with Quickstart tutorial:
http://framework.zend.com/docs/quickstart/create-your-project
- Run through http://guestbook/ (working code) if unsure what's required
- Need to create a new controller "guestbook"
- Inside this controller need to create an action "sign"

096 -------------------------------------------------------------------------------
Zend_Config provides an object oriented way of using *.ini files

097 -------------------------------------------------------------------------------
Zend_Config is designed to simplify the access to, and the use of, configuration data within applications. It provides a nested object property based user interface for accessing this configuration data within application code. The configuration data may come from a variety of media supporting hierarchical data storage. Currently Zend_Config provides adapters for configuration data that are stored in text files with Zend_Config_Ini and Zend_Config_Xml. 

Code example using an array:
http://framework.zend.com/manual/en/zend.config.html

DEMO: zend_config_php_test.php

099 -------------------------------------------------------------------------------
If set to "development" = 4 config params
If set to "production" = 4 params, 2 being overriden

100 -------------------------------------------------------------------------------
Inheritance is in a single line, not multiple
But this is possible:
[test]
AAA
[abc:test]
BBB
[xyz:abc]
CCC

DEMO: zend_config_ini_test.php

102 -------------------------------------------------------------------------------
Make sure you're familiar with parse_ini_file()
Settings can be grouped: group name is followed by a period
i.e. phpSettings.display_errors, phpSettings.display_startup_errors
Look through zend.config.html in the ZF docs
NOTE: in our demo app, it uses "Zend_Application('application.ini') rather than "Zend_Config_Ini('application.ini')
Zend_Config is used by Zend_Application (?)
Items separated by "." end up being keys with nested associative arrays

CODEBREAK: Modify guestbook.work to use Zend_Config

1.	Open index.php
2.	Just before "require_once 'Zend/Application.php' add the following:
	//require_once 'Zend/Config.php';
	require_once 'Zend/Config/Ini.php';
	$config = new Zend_Config_Ini(APPLICATION_PATH . '/configs/application.ini', APPLICATION_ENV);
3.	Modify the call to Zend_Application as follows:
	$application = new Zend_Application(APPLICATION_ENV, $config);
4.	Test in the browser

103 -------------------------------------------------------------------------------
Syntax error: should be [staging : production]
To merge 2 configuration objects:
$merged = new Zend_Config(array_merge($default->asArray(),$user->asArray()));
Accommodates defaults + user specific

104 -------------------------------------------------------------------------------
In ini: bootstrap.class
In code: $config->bootstrap->class
$configArray = $this->getFrontController()->getParam('bootstrap')->getOptions();
DEMO: zend_config_ini_test.php

Q: How can you use Zend_Config in an MVC app created by Zend_Tool?
A: Modify index.php as follows:
// Read config data
require_once 'Zend/Config.php';
require_once 'Zend/Config/Ini.php';
$config = new Zend_Config_Ini(APPLICATION_PATH . '/configs/application.ini', 
                              APPLICATION_ENV);

/** Zend_Application */
require_once 'Zend/Application.php';

// Create application, bootstrap, and run
$application = new Zend_Application(
    APPLICATION_ENV,
    // Use a Zend_Config object instead of '/configs/application.ini'
    $config
);


105 -------------------------------------------------------------------------------
In XML:
<staging extends="production"> is the same as:
[staging : production]
http://framework.zend.com/wiki/display/ZFDEV/Configuring+Your+URL+Rewriter
Q: How can you modify a Zend_Tool MVC app to read an XML config file?
A: Modify to use Zend_Config_Xml as follows:
// Read config data
require_once 'Zend/Config.php';
require_once 'Zend/Config/Xml.php';
$config = new Zend_Config_Xml(APPLICATION_PATH . 
                              '/configs/application.xml', 
                              APPLICATION_ENV);
(see above for the rest)

106 -------------------------------------------------------------------------------
[optional] CODEBREAK:

1.  Create a directory /var/www/php_zff
2.  Copy zend_config_ini_test.php into /var/www/php_zff/zf_config.php
3.  Copy config.xml into /var/www/php_zff/config.xml
4.  Link the ZF library as follows:
    ln -s /usr/local/zend/share/ZendFramework/libary/Zend /var/www/php_zff/Zend
5.  Modify zf_config.php to read config.xml
6.  Test: http://localhost/php_zff/zf_config.php
	
108 -------------------------------------------------------------------------------

guestbook.work project:

CODEBREAK: prepare guestbook.work for access to the sqlite database:

1.  Copy /workspace/guestbook/data/* to /workspace/guestbook.work/data
2.  Configure Application/configs/application.ini for the sqlite db
3.  Use Zend Studio - Window - Open Perspective - Remote System Explorer 
    to configure the database file write permissions

CODEBREAK: Read Zend_Config parameters

1.  Add an entry to application.ini in the [Production] section
	version = '1.0.1'
2.  In the index controller, add these four lines of code:
	// #1: $options['version']
	$options = $this->getFrontController()->getParam('bootstrap')->getOptions();
	var_dump($options);
	// #2: direction access to "version"
	$version = $this->getInvokeArg('bootstrap')->getOption('version');
	echo $version;
3.  Test: http://guestbook.work/
4.  Based on the information you see, add code which has the view script display the version number.
5.  When done, remove the var_dump()

109 -------------------------------------------------------------------------------
Could use Zend_Log to log errors
See docs

110 -------------------------------------------------------------------------------
DEMO: http://helloworld/demo/exception

113 -------------------------------------------------------------------------------
Namespaces in ZF <> PHP 5.3 namespaces
ZF namespace is a slice within the $_SESSION[] array

114 -------------------------------------------------------------------------------
Zend_Session_Namespace implements the __get(), __set(), __isset(), and __unset() magic methods
http://framework.zend.com/manual/en/zend.session.basic_usage.html
language.oop5.overloading.php#language.oop5.overloading.members

[optional] CODEBREAK: http://localhost/php_zff/zend_session_test.php

1.  Create a directory /var/www/php_zff
2.  Link the ZF library as follows:
    ln -s /usr/local/zend/share/ZendFramework/libary/Zend /var/www/php_zff/Zend
3.  Copy this into /var/www/php_zff/zf_session.php
4.  Test as http://localhost/zff/zf_session.php

<?php
require_once 'Zend/Session.php';
$defaultNamespace = new Zend_Session_Namespace('Default');
if (isset($defaultNamespace->numberOfPageRequests)) {
	$defaultNamespace->numberOfPageRequests++;
} else {
	$defaultNamespace->numberOfPageRequests = 1;
}
$msg = "Page requests: " . $defaultNamespace->numberOfPageRequests;
?>
<html>
<body>
<?php echo $msg; ?>
<p>
<form>
<input type=submit />
</form>
</p>
</body>
</html>

115 -------------------------------------------------------------------------------
Bootstrap runs before any headers are sent
http://framework.zend.com/manual/en/zend.sesion.advanced.usage.html
Quick Check: 2 & 4
Best to turn session autostart off
1.  Wrong - Do not set PHP's session.auto_start ini setting in either php.ini or .htaccess
      (http://www.php.net/manual/en/ref.session.php#ini.session.auto-start). 
      If you do not have the ability to disable this setting in php.ini, you are using mod_php (or equivalent), and the
      setting is already enabled in php.ini, then add php_value session.auto_start 0 to your .htaccess file (usually in your 
      HTML document root directory).

2. Valid - Use Zend_Session::start()
     If you want all requests to have and use sessions, then place this function call early and unconditionally in your ZF bootstrap code. Sessions have some overhead. If some requests need sessions, but other requests will not need to use sessions, then:
Unconditionally, set the strict option to true (see Zend_Session::setOptions( ) ) in your userland bootstrap
Call Zend_Session::start(), only for requests that need to use sessions, before the first call to new Zend_Session_Namespace()
Use new Zend_Session_Namespace() normally, where needed, but make sure Zend_Session::start() has been called previously

	The strict option prevents new Zend_Session_Namespace() from automatically starting the session using Zend_Session::start(). Thus, this option helps developers of userland ZF applications enforce a design decision to avoid using sessions for certain requests, since an error will be thrown when using this option and instantiating Zend_Session_Namespace, before an explicit call to Zend_Session::start().

	Do not use this option in ZF core library code, because only userland developers should make this design choice. Similarly, all "library" developers should carefully consider the impact of using Zend_Session::setOptions() on users of their library code, since these options have global side effects (as do the underlying options for ext/session).

3. Wrong -Do not use PHP's session_start() function directly 
     If you use session_start() directly, and then start using Zend_Session_Namespace, an exception will be thrown by  
     Zend_Session::start() ("session has already been started"). If you call session_start(), after using
     Zend_Session_Namespace or starting Zend_Session::start() explicitly, an error of level E_NOTICE will be generated, and the call will be ignored.

4. Valid - Use new Zend_Session_Namespace() whenever needed, and the session will be automatically started within Zend_Session

	Just use new Zend_Session_Namespace() whenever needed, and the session will be automatically started within Zend_Session. This offers extremely simple usage that works well in most situations. However, you then become responsible for ensuring that the first new

	Zend_Session_Namespace() happens before any output (i.e. HTTP headers ) has been sent by PHP to the client, if you are using the default, cookie-based sessions (strongly recommended).

117 -------------------------------------------------------------------------------
Q: What happens when session data expires?  (unset()?)
A: Zend session "marks" things to be deleted and then later unsets them
Q: Where does Zend session keep count of hops/requests?
A: Not in the session namespace you create, but in its own internal namespace(?)

DEMO: Zend_Session API docs
Methods: expireSessionCookie(), forgetMe(), rememberMe(seconds), rememberUntil(seconds)
Properties: static array $_expiringData
DEMO: Zend_Session_Namespace API docs
Methods: lock(), unlock(), isLocked()

119 -------------------------------------------------------------------------------
See GuestboookController.php line 50
DEMO:

Zend_Session 
a.    File Bootstrap.php
b.    Class GuestbookController::signAction()
c.    Enter a wrong Captcha > 3 times

120 -------------------------------------------------------------------------------
CODEBREAK: use Zend_Session to implement a counter:
*If Not Already Done:
*1.	Create in guestbook.work a new controller called "guestbook" using zf or Zend Studio
*2.	In the new controller, create a "sign" action + corresponding view
3.	Implement a simple form in the sign view:
	<form method=post><input type=submit></form>
4.	Implement a page counter:
	use $this->getRequest()->isPost() to see if something has been posted
5.	Test and make sure that when you press the button +3x you receive an "exceeded" message.
	NOTE: may have to keep hitting the button quite a few times before the error is generated.
6.	We'll add the rest of the form later!!!

	// from the request object determine if a post has occurred
	// if so: obtain params -- assume an invalid entry
	// create session namespace
	// check if the counter is set
	// if not: set to 0
	// otherwise: increment
	// is the counter > $max?
	// if so: output an appropriate message to the view 

121 -------------------------------------------------------------------------------
Tutorials:
http://www.developertutorials.com/tutorials/php/zend-framwork-tutorial-8-08-13/page1.html
http://akrabat.com/zend-framework-tutorial/ <-- more up to date (i.e. ZF 1.10)

122 -------------------------------------------------------------------------------
Review guestbook - models - guestbook.php and models - db - guestbook.php
application/models/DbTable/Guestbook.php = extends Zend_Db_Table_Abstract
application/models/Guestbook.php = extends Zend_Db_Table_Row_Abstract
--> We'll cover rowsets later (starting with slide 151)

123 -------------------------------------------------------------------------------
Model patterns: domain, table, service, etc.
Models are not just data and/or databases!
Controllers control flow of app logic

124 -------------------------------------------------------------------------------
NOTE: No default model pattern!!!
Tools used by the model:
Zend_Db
Zend_Feed
Zend_Service
Zend_Soap
Zend_Rest (Representational State Transfer)
Zend_XmlRpc
Zend_Wildfire (Wildfire clients -- i.e. Firebug Console; also Zend_Db_Profiler_Firebug)
Zend_OpenID

http://weierophinney.net/matthew/archives/202-Model-Infrastructure.html
(Matthew Weierophinney is the lead pgmr for ZF) -- What are you modeling?

125 -------------------------------------------------------------------------------
http://codeutopia.net/blog/2009/01/05/decoupling-models-from-the-database-data-access-object-pattern-in-php/
Advanced model usage (Rob Allen w/ comments):
http://akrabat.com/js/on-models-in-a-zend-framework-application/

126 -------------------------------------------------------------------------------
Note: modeling unties business logic from db structure, but somewhere along the line you'll need to define a "DAO" (data access object).  
But all this merely moves the problem further down the line.

127 -------------------------------------------------------------------------------
"getters" and "setters"

132 -------------------------------------------------------------------------------
Large collection of various components that have to do with accessing database data

Designed to be simple so that developers can easily link to DBs like SQL within their application, without a great deal of knowledge of the DB, and yet still produce a robust application

Not designed like ORM (object relational mapping) in an active record pattern because of associated performance hit (slowdown) due to constant introspection; not scalable, high-performance approach

Instead, developed tools like _Adapter, which combined accomplishes same goal but in a much more pragmatic manner 
Wrapper that unifies all the DB drivers for all the underlying DBs under a consistent API
Step above a PDO

_Profiler is a built-in tool that is used for debugging purposes around performance – e.g., show how many queries have completed; how long did each query take to run?

_Select is a builder class, allows you to construct very complex queries using an OO API
across different DB, eliminating specific DB-dependencies --> Object Oriented SQL

_DB_Table is closest thing in ZF to ORM; defines table as an object, for which you can then define a relationship 
(see: http://www.agiledata.org/essays/mappingObjects.html)

WEBINAR: http://files.zend.com/webinar/zfdbaccess/webinar-zfdbaccess-20071031.html
Dated Oct 2007, but still valid

133 -------------------------------------------------------------------------------
Be sure to contrast Zend_Db vs. PDO: Zend_Db uses PDO
ed@ed:~$ ls -l /usr/local/zend/share/ZendFramework/library/Zend/Db/Adapter/Pdo |cut -c 47-
Abstract.php
Ibm
Ibm.php
Mssql.php
Mysql.php
Oci.php
Pgsql.php
Sqlite.php

135 -------------------------------------------------------------------------------
Can use the params defined in application.ini
$db = Zend_Db::factory($config->db);

Guestbook:
application/models/DbTable/GuestBook.php
- extends Zend_Db_Table_Abstract
PHP Include Path - Zend Framework Library - Zend - Db - Table - Abstract.php
- which requires Zend/Db.php
- Which creates instance of adapter
--> This is where the _connect() methods, etc. are found

CODEBREAK: Gain Access to the Database Adapter from a Controller
1.	Create an action called 'test' in the index controller

--- Get the database adapter
2.	Get an instance of the bootstrap object:
	$bootstrap = $this->getFrontController()->getParam('bootstrap');
3.	Have a look at available plugin resources:
	Zend_Debug::dump($bootstrap->getPluginResourceNames(), "PLUGIN RESOURCES");
4.	Get an instance of the database resource:
	$resourceDb = $bootstrap->getPluginResource('db');
5.	Get an instance of the adapter:
	$adapter = $resourceDb->getDbAdapter();

	--- or ---
	// Alternatively: $adapter = Zend_Db_Table::getDefaultAdapter()

--- Run an SQL query
6.	Now you can perform SQL statements on the adapter such as:
	$results = $adapter->fetchAll('SELECT * FROM guestbook');
	Zend_Debug::dump($results, "DUMP FROM GUESTBOOK DATABASE");
7.	We'll look at more elegant ways of getting results next!


136 -------------------------------------------------------------------------------
Show the following:
PHP Include Path - Zend Framework Library - Zend - Db - Adapter - Pdo - Mysql.php
See: http://framework.zend.com/manual/en/zend.db.adapter.html
ed@ed:~$ ls -l /usr/local/zend/share/ZendFramework/library/Zend/Db/Adapter/*.php |cut -c 47-
Abstract.php
Db2.php
Exception.php
Mysqli.php
Oracle.php
Sqlsrv.php

137 -------------------------------------------------------------------------------
i.e.
$profiler = new MyProject_Db_Profiler();
$profiler->setEnabled(true);
$configData = array('instance' => $profiler);
$config = new Zend_Config($configData);
$params['profiler'] = $config;
$db = Zend_Db::factory('PDO_MYSQL', $params);
// Filter by time
$profiler->setFilterElapsedSecs(5);
// Filter by connect type: INSERT, UPDATE, QUERY, etc.
$profiler->setFilterQueryType(Zend_Db_Profiler::SELECT);
NOTE: there's a Firefox Zend Db Profiler plugin
(see: http://framework.zend.com/manual/en/zend.db.profiler.html#zend.db.profiler.profilers.firebug)

139 -------------------------------------------------------------------------------
DEMO: http://localhost/php_zff/zend_db_profiler_test.php

141 -------------------------------------------------------------------------------
NOTE: profiling incurs overhead.  Turn off for production
DEMO: (from Zend Studio) Run - Profile URL - http://guestbook/

142 -------------------------------------------------------------------------------
www.martinfowler.com/eaaCatalog/tableDataGateway.html
ZF design pattern implementation
As of ZF 1.9, you can instantiate Zend_Db_Table directly
Puts all the SQL in one place
Separates the SQL from both code and data

143 -------------------------------------------------------------------------------
$_name is "understood" by ZF to have a particular use
$_schema usually refers to the database containing the table

144 -------------------------------------------------------------------------------
$_primary = primary key = string for single column, array for multiple columns (compound key)
Simple use case:
class Bugs extends Zend_Db_Table_Abstract {}
$a = new Bugs(array('name'=>'bugs','schema'=>'dbname','primary'=>'sku'));
REF: Zend_Db_Table - API docs
    Zend_Db_Table_Abstract::$_cols
    Zend_Db_Table_Abstract::$_db
    Zend_Db_Table_Abstract::$_defaultDb
    Zend_Db_Table_Abstract::$_defaultMetadataCache
    Zend_Db_Table_Abstract::$_defaultSource
    Zend_Db_Table_Abstract::$_defaultValues
    Zend_Db_Table_Abstract::$_definition
    Zend_Db_Table_Abstract::$_definitionConfigName
    Zend_Db_Table_Abstract::$_dependentTables
    Zend_Db_Table_Abstract::$_identity
    Zend_Db_Table_Abstract::$_metadata
    Zend_Db_Table_Abstract::$_metadataCache
    Zend_Db_Table_Abstract::$_metadataCacheInClass
    Zend_Db_Table_Abstract::$_name
    Zend_Db_Table_Abstract::$_primary
    Zend_Db_Table_Abstract::$_referenceMap
    Zend_Db_Table_Abstract::$_rowClass
    Zend_Db_Table_Abstract::$_rowsetClass
    Zend_Db_Table_Abstract::$_schema
    Zend_Db_Table_Abstract::$_sequence

145 -------------------------------------------------------------------------------
DEMO: zend_db_table_test.php
NOTE: There is a 4th way to create an instance of a table: use the ini file and identify resources;
      In this case, uses Zend_Application_Resource_Db
NOTE: If you want to set up multiple db connections in application.ini, use Zend_Application_Resource_MultiDb
Here is an example of extracting a db resource when multidb is used:
application.ini:
resources.multidb.db1.adapter = "PDO_MYSQL"
resources.multidb.db1.dbname = "zend"
resources.multidb.db1.host = "localhost"
resources.multidb.db1.username = "zend"
resources.multidb.db1.password = "password"
resources.multidb.db2.adapter = "PDO_SQLITE"
resources.multidb.db2.dbname = APPLICATION_PATH "/../data/db/guestbook.db"

controller:
$bootstrap  = $this->getInvokeArg('bootstrap');
$dbResource = $bootstrap->getPluginResource('multidb');
$db1 = $dbResource->getDb('db1');	// obtains mysql database instance
$db2 = $dbResource->getDb('db2');	// obtains sqlite database instance

If you want to do the same from the bootstrap:

	protected function _initDatabases()
	{
		$this->bootstrap('multidb');				// activate the resource
		$db = $this->getPluginResource('multidb');		// grab the resource
		Zend_Registry::set('products',  $db->getDb('db1'));	// set adapter for 1
		Zend_Registry::set('guestbook', $db->getDb('db2'));	// set adapter for 2
	}


146 -------------------------------------------------------------------------------
DEMO: zend_db_table_insert.php
In the default behavior of Zend_Db_Table_Abstract, it is assumed that the table has an auto-incrementing primary key, but, there are other types of primary keys as well.
In Zend_Db_Table_Abstract, if you define the protected variable $_sequence to be the Boolean value TRUE, then the class assumes that the table has an auto-incrementing primary key
NOTE: use "lastInsertId()" to retrieve last key (if $_sequence = TRUE);
REF: http://framework.zend.com/manual/1.10/en/zend.db.adapter.html
MySQL, Microsoft SQL Server, and SQLite are examples of RDBMS brands that support auto-incrementing primary keys
PostgreSQL has a SERIAL notation that implicitly defines a sequence based on the table and column name, and uses the sequence to generate key values for new rows
IBM DB2 has an IDENTITY notation that works similarly - if you use either of these notations, treat your Zend_Db_Table class as having an auto-incrementing column with respect to declaring the $_sequence member as TRUE
REF: http://framework.zend.com/manual/en/zend.db.table.html
NOTE: You can override the save(), insert(), update() and delete() methods in your class definition for the table if you need additional logic, error checking, etc.

147 -------------------------------------------------------------------------------
DEMO: zend_db_table_update.php
When inserting or updating, follow the usual precautions if data is user supplied.  
There is quote(),quoteInto(),and quoteIdentifier() methods available via Zend_Db_Adapter:
REF: http://framework.zend.com/manual/1.10/en/zend.db.adapter.html#zend.db.adapter.quoting

The  *** quote() *** method accepts a single argument, a scalar string value. It returns the value with special characters escaped in a manner appropriate for the RDBMS you are using, and surrounded by string value delimiters. The standard SQL string value delimiter is the single-quote ('). 

The most typical usage of quoting is to interpolate a PHP  variable into a SQL expression or statement. 
You can use the *** quoteInto() *** method to do this in one step. This method takes two arguments: the first argument is a string containing a placeholder symbol (?), and the second argument is a value or PHP variable that should be substituted for that placeholder. 

The *** quoteIdentifier() *** method works like quote(), but it applies the identifier delimiter characters to the string according to the type of Adapter you use. For example, standard SQL uses double-quotes (") for identifier delimiters, and most RDBMS  brands use that symbol. MySQL uses back-quotes (`) by default. The quoteIdentifier() method also escapes special characters within the string argument. Identifiers would include things like a table name or a column name.

148 -------------------------------------------------------------------------------
DEMO: zend_db_table_delete.php
NOTE: Make sure the value supplied to $table->delete($where); is not NULL!!!!!!

149 -------------------------------------------------------------------------------
DEMO: zend_db_table_find.php
For more complicated queries, use Zend_Db_Select (see #159)

150 -------------------------------------------------------------------------------
DEMO: zend_db_table_fetchall.php
NOTE: can use "fluent" interface
ALSO: 
fetchAssoc() = returns an assoc array; 
fetchCol() = returns an array with values from only the 1st col specified
fetchPairs() = returns an assoc array, but with one key => value pair per entry
fetchRow() = returns 1st row only (i.e. LIMIT 1)
fetchOne() = single value = 1st row, 1st column only

CODEBREAK: Modify the index action in the guestbook controller to produce a list of email addresses of those who have signed the guestbook.

Here is the structure of the guestbook database:

CREATE TABLE guestbook (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    email VARCHAR(32) NOT NULL DEFAULT 'php',
    comment TEXT NULL,
    created DATETIME NOT NULL
)

Hints:

1.    Create a Zend_Db_Table model
2.    Use the fetchAll() method

151 -------------------------------------------------------------------------------
DEMO: zend_db_table_row_fetchrow.php

152 -------------------------------------------------------------------------------
DEMO: zend_db_table_row_toarray.php

153 -------------------------------------------------------------------------------
DEMO: zend_db_table_row_update.php

154 -------------------------------------------------------------------------------
DEMO: zend_db_table_row_delete.php
Q: Has fetchNew() been replaced by createRow()?
Note (from http://files.zend.com/help/Zend-Framework/zend-framework.htm)
The createRow() method was called fetchNew() in earlier releases of Zend_Db_Table. You are encouraged to use the new method name, even though the old name continues to work for the sake of backward compatibility. 

155 -------------------------------------------------------------------------------
DEMO: zend_db_table_rowset.php


FOR MONDAY:
http://www.slideshare.net/weierophinney/slideshows

156 -------------------------------------------------------------------------------
DEMO: zend_db_table_row_relational.php
Q: How does Zend_Db handle transactions?
A: Transactions are handled by the adapter using the methods _beginTransaction(), _commit() and _rollback()
   You can access these methods directly off an instance of the adapter.  If you don't have this, then
   use ->getAdapter() first, and then one of the three

157 -------------------------------------------------------------------------------
Zend_Db_Table -- used to define relationships betw/ tables
DEMO: zend_db_table_many_to_many.php

159 -------------------------------------------------------------------------------
DEMO: zend_db_select.php
See: http://framework.zend.com/manual/en/zend.db.select.html

Q: Why this and not SQL?
A: Rewrites SQL for underlying db; also, is more readable for complicated queries
A: This is object oriented SQL
Q: Can ZF handle exists, not exists, union and minus?
A: Unions = yes
Q: Can Zend_Db_Select handle "AND" clauses?
A: Yes: just add additional ->where() clauses; AND is implied
Q: Can Zend_Db_Select handle "OR" clauses?
A: Yes: just add an ->orWhere() clause

160 -------------------------------------------------------------------------------
Zend_Db_Select does quoting for you
Some bits are not quoted: i.e. the clause for a "join"
Look at docs -- shows examples: http://framework.zend.com/manual/en/zend.db.select.html
Note the use of "quoteIdentifier":
// Build this query,
// quoting the special column name "from" in the expression:
//   SELECT p."from" + 10 AS origin
//   FROM "products" AS p
$select = $db->select()
	   ->from(array('p' => 'products'),array('origin' =>
                      '(p.' . $db->quoteIdentifier('from') . ' + 10)'));
If you use the profiler, or echo $select, you can see a dump of the SQL produced
Zend_Debug::dump();

163 -------------------------------------------------------------------------------
Fluent interface: each clause produces a new $this

164 -------------------------------------------------------------------------------
DEMO: zend_db_select.php
See: http://framework.zend.com/manual/en/zend.db.select.html

165 -------------------------------------------------------------------------------
Would need to add array() 3rd line to eliminate "l.*" if you don't want anything from line_items
Example 13.54 in Zend_Db_Select docs

167 -------------------------------------------------------------------------------
Show the class how the Guestbook Zend_Db_Table pieces fit into MVC 
DEMO: http://DbTableDemo/ --> shows how to implement zend_db_table_fetchall.php as MVC

168 -------------------------------------------------------------------------------
CODE BREAK #1: Code the Zend_Db_Table components into guestbook.work
1.	Configure the app to connect to the database (if not already done)
2.	Create a DbTable model for the 'guestbook' table
3.	Display a list of users who have signed the guestbook

Structure:
CREATE TABLE guestbook (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    email VARCHAR(32) NOT NULL DEFAULT 'php',
    comment TEXT NULL,
    created DATETIME NOT NULL
)

CODE BREAK #2: [optional]
1.	Add an action which inserts a name into the guestbook
2.	Use a hard coded array for now (later we'll link in a form)

170 -------------------------------------------------------------------------------
Zend_Form - Zend_View is optional because Zend_Form can be used to validate model-view info

171 -------------------------------------------------------------------------------
Zend_Form - provides some protection against CRSF and XSS
Note: lookup Zend_Form_Dojo and be familiar w/ it

173 -------------------------------------------------------------------------------
Filters are exec'd before validation
Alternate syntax:
$username = new Zend_Form_Element_Text('username');
$username->addFilter('StringTrim');
$username->addFilter('StringToLower');
$username->addValidator('Alnum');
$username->addValidator('StringLength',FALSE,array(3,20));
$username->setRequired(TRUE);
$username->setLabel('username');

174 -------------------------------------------------------------------------------
Should be Zend_Form_Element_Password

176 -------------------------------------------------------------------------------
Proper Syntax:
if ($this->getRequest()->isPost()) {
	if ($form->isValid($this->getRequest()->getPost())) {
		$msg = "<br />SUCCESSFUL LOGIN\n";
	} else {
		$msg = "<br />TRY LATER\n";
	}
}

178 - 180 -------------------------------------------------------------------------
Inside VM: show FormDemo - FormController - loginAction()
- Shows the code from last 4 slides
Demo (in VM) http://formdemo/form/login

181 -------------------------------------------------------------------------------
shiflett.org = security related topics
Look for /articles/cross-site-request-forgeries

182 -------------------------------------------------------------------------------
More detail on validators and plugins when we get to the Wiki App

183 -------------------------------------------------------------------------------
REF: http://framework.zend.com/manual/en/zend.form.standardElements.html
There is a Zend_Form_Element_xxx for every HTML form element

184 -------------------------------------------------------------------------------
Example of Zend_Form_DisplayGroup
http://formdemo/form/userinfo

185 -------------------------------------------------------------------------------
Example of Zend_Form_SubForm
See http://framework.zend.com/manual/en/zend.form.advanced.html
Multi-Page Forms
1.	$sub1 = new Zend_Form_SubForm();
2.	Add elements
3.	Repeat until all pages represented
4.	$form = new Zend_Form();
5.	$form->addSubForms(array("page1" => $sub1,"page2" => $sub2, etc.);
6.	Retrieve using $form->getSubForms();

186 -------------------------------------------------------------------------------
Show applications/controllers/GuestbookController.php - signAction()
forms/Guestbook.php - Default_Form_Guestbook (extends Zend_Form)

187 -------------------------------------------------------------------------------
CODE BREAK: code form, and captcha into guestbook.work

1. Look at code complete version of guestbook
2. Which form elements do you need?
3. Code these into a file which should be placed under application/forms
4. Instantiate and validate the form in the guestbook/sign action
5. Insert the email address, comment etc. into the database

OPTIONAL:
Create an image CAPTCHA

1. In ZD select guestbook.work/public
2. Make a "captcha" folder
3. Set permissions to make it writeable
   Window - Open Perspective - Other - Remote System Explorer

CAPTCHA image element:
$this->addElement('captcha', 'captcha', array(
        'label'      => 'Please enter the 5 letters displayed below:',
        'required'   => true,
        'captcha'    => array(
			'captcha'    => 'image',
		        'name'       => 'guestbookcaptcha',
		        'wordLen'    => 5,
		        'font'       => '/usr/share/fonts/truetype/freefont/FreeSansBold.ttf',
		        'fontSize'   => 30,
		        'imgDir'     => '/workspace/guestbook.work/public/captcha',
		        'imgUrl'     => 'http://container.my.phpcloud.com/guestbookwork/captcha',
		        'timeout'    => 300)
        ));

188 -------------------------------------------------------------------------------

191 -------------------------------------------------------------------------------
.htaccess: php_value "short_open_tag" "on"
php.ini: short_open_tag = on
http://us.php.net/manual/en/control-structures.alternative-syntax.php
<? if ($x === TRUE) : ?>
some HTML
<? endif; ?>
<? while ($x) : ?>
some HTML
<? endwhile; ?>
etc.

193 -------------------------------------------------------------------------------

194 -------------------------------------------------------------------------------
In the MVC framework, Views are executed by the ViewRenderer plugin, automatically registered with the Front Controller
http://framework.zend.com/manual/en/zend.view.introduction.html

196 -------------------------------------------------------------------------------
In MVC framework: change these params in application.ini
resources.view.basePath = xxx
resources.view.encoding = "xxx"
resources.view.escape = "xxx"
resources.view.filter = "xxx"
resources.view.strictVars = true | false
(uses Zend_Application_Resource_View)

197 -------------------------------------------------------------------------------
See discussion on escaping:
http://framework.zend.com/manual/en/zend.view.scripts.html#zend.view.scripts.escaping
One of the most important tasks to perform in a view script is to make sure that output is escaped properly; among other things, this helps to avoid cross-site scripting attacks. Unless you are using a function, method, or helper that does escaping on its own, you should always escape variables when you output them. 
DEMO: http://formdemo/form/notfound

198 -------------------------------------------------------------------------------
DEMO: http://formdemo/form/book

199 -------------------------------------------------------------------------------
Shows booklist.php file referenced in slide 198
Point out that it's OK to have view-related logic in a view script
Some people think you can have no logic or code in a view script
DEMO: http://formdemo/form/book

200 -------------------------------------------------------------------------------
Code @ top: should be $view->a $view->b and $view-c
Note: there are 3 approaches.  First 2 = array; 3rd = object

NOTE: same:
$this->view->a = "Curly";
$this->view->assign(array('a' => "Curly"));

You could also send an array to the view:
$this->view->vals = array('a'=>"Curly",'b'=>"Larry",'c'=>"Moe");

NOTE: all 3 techniques yield exactly the same results: 3 variables a, b, and c added the the view

186 -------------------------------------------------------------------------------
DEMO: zend_view_render.php
NOTE: in MVC you don't need to call render() -- it's done by the ViewRenderer plugin
NOTE: to change view scripts from a controller: $this->_helper->viewRenderer->setScriptAction('view_script.phtml');

202 -------------------------------------------------------------------------------
http://framework.zend.com/manual/en/zend.view.scripts.html#zend.view.scripts.escaping
NOTE: output is not automatically escaped.  You need to add:
<?php echo $this->escape($this-var)); ?>

203 -------------------------------------------------------------------------------
See discussion in docs:
http://framework.zend.com/manual/en/zend.view.scripts.html#zend.view.scripts.templates
i.e. Zend_View_Smarty
Tell class it's beyond scope, and don't have any examples: sorry!!!
http://www.webresourcesdepot.com/19-promising-php-template-engines/

204 -------------------------------------------------------------------------------
3rd party template systems designed to work with ZF
http://www.smarty.net/
http://dwoo.org/
http://phpsavant.com/
http://www.templateblocks.com/
http://libs.invenzzia.org/en/libraries/open-power-template
http://www.tinybutstrong.com/
http://www.raintpl.com/
http://phptal.motion-twin.com/
http://www.phpte.com/
http://templatelite.sourceforge.net/
http://www.vivvo.net/vte.php
http://www.phpxtemplate.org/
http://vlib.clausvb.de/vlibtemplate.php
http://php-sugar.net/
http://www.feverxl.org/template/
http://alexeyrybak.com/blitz/blitz_en.html
http://www.greaterscope.net/projects/Vemplator
etc.
PEAR:
http://pear.php.net/package/HTML_Template_Flexy/
http://pear.php.net/package/HTML_Template_IT/
http://pear.php.net/package/HTML_Template_PHPLIB/
http://pear.php.net/package/HTML_Template_Sigma/

Show smarty example from docs:
http://framework.zend.com/manual/en/zend.view.scripts.html#zend.view.scripts.templates

206 -------------------------------------------------------------------------------
// fetch 'content' key using layout helper:
echo $this->layout()->content;
// fetch 'foo' key using placeholder helper:
echo $this->placeholder('Zend_Layout')->foo;
// other typical placeholder helpers
<?php echo $this->headTitle() ?>
<?php echo $this->headScript() ?>
<?php echo $this->headStyle() ?>

207 -------------------------------------------------------------------------------
Alternatively, if using MVC setup with Zend_Tool: add to application.ini
resources.layout.layoutPath = APPLICATION_PATH "/layouts/scripts"

208 -------------------------------------------------------------------------------
TODO: Code this

209 -------------------------------------------------------------------------------
See #211: $this->_helper->layout() (from within a view)
To set a layout variable from a controller:
$this->view->variable (just like any other view variable)

210 -------------------------------------------------------------------------------
DEMO: CodeArchive - Bootstrap.php + application.ini
MVC: initialize layout as a resource:
Either: zf enable layout (from command line) 
Or: resources.layout*
You might want to work with the view in the bootstrap.
One way to do this is to initialize Zend_Application_Resource_View in application.ini
resources.view[] = ''
REF: http://framework.zend.com/manual/en/learning.quickstart.create-layout.html

211 -------------------------------------------------------------------------------
DEMO: CodeArchive - Bootstrap.php + application.ini

212 -------------------------------------------------------------------------------
DEMO: http://layoutdemo/

213 -------------------------------------------------------------------------------
Layout w/out MVC -- used as standalone

216 -------------------------------------------------------------------------------
CODEBREAK: Add a Layout to guestbook.work
1.	Create an application/layouts directory
2.	Create a simple layout script application/layouts/layout.phtml with a link
	to the sign action
3.	Configure application.ini to identify the layout resource path
4.	Configure application.ini to activate the view as a resource
	(this allows you to insert an XHTML doctype)

HINT: see the code complete guestbook application.ini file

218 -------------------------------------------------------------------------------
http://wikiapp/
Username: zenduser / password
New Concepts: plugins, helpers, logging, registry, authentication, ACLs
To Revisit: Zend_Db, esp. multi table relationships
DEMO: http://helperdemo/

219 -------------------------------------------------------------------------------
Use of underscores: OOP convention for a protected or private

224 -------------------------------------------------------------------------------
High level discussion -- much more detail in the docs
Register plugins w/ plugin broker using registerPlugin()
Default plugins:
Zend_Controller_Plugin_ActionStack
Zend_Controller_Plugin_Error
DEMO: helloworld/library/Zend/Controller/Plugin/Abstract.php

226 -------------------------------------------------------------------------------
The event methods are defined in the abstract class Zend_Controller_Plugin_Abstract, from which user plugin classes inherit:

* routeStartup() is called before Zend_Controller_Front calls on the router to evaluate the request against the registered routes.
* routeShutdown() is called after the router finishes routing the request.
* dispatchLoopStartup() is called before Zend_Controller_Front enters its dispatch loop.
* preDispatch() is called before an action is dispatched by the dispatcher. This callback allows for proxy or filter behavior. By altering the request and resetting its dispatched flag (via Zend_Controller_Request_Abstract::setDispatched(false)), the current action may be skipped and/or replaced.
* postDispatch() is called after an action is dispatched by the dispatcher. This callback allows for proxy or filter behavior. By altering the request and resetting its dispatched flag (via Zend_Controller_Request_Abstract::setDispatched(false)), a new action may be specified for dispatching.
* dispatchLoopShutdown() is called after Zend_Controller_Front exits its dispatch loop.

See: http://framework.zend.com/manual/en/zend.controller.plugins.html
TODO: code the example

228 -------------------------------------------------------------------------------
http://framework.zend.com/manual/en/zend.controller.actionhelpers.html
Note: Zend Framework includes several action helpers by default: AutoComplete for automating responses for AJAX autocompletion; ContextSwitch and AjaxContext for serving alternate response formats for your actions; a FlashMessenger for handling session flash messages; Json for encoding and sending JSON responses; a Redirector, to provide different implementations for redirecting to internal and external pages from your application; and a ViewRenderer to automate the process of setting up the view object in your controllers and rendering views;
To Create: Zend Studio - File - New - ZendFramework Item - Action Helper
DEMO: http://HelperDemo/
REF: http://weierophinney.net/matthew/archives/246-Using-Action-Helpers-To-Implement-Re-Usable-Widgets.html

232 -------------------------------------------------------------------------------
NOTE: addPath() - Add path to repositories where Action_Helpers could be found.
static void addPath (string $path, [string $prefix = 'Zend_Controller_Action_Helper'])
    * string $prefix: Optional; defaults to 'Zend_Controller_Action_Helper'

CODEBREAK: create an Action Helper
1.    Open the guestbook.work application in Zend Studio
2.    Add an option email = "xyz@test.com" to the application.ini file
3.    Create a folder application/controllers/helpers
4.    In Bootstrap.php create an "_init" method which registers Action Helpers with the Broker:
      Zend_Controller_Action_HelperBroker::addPath(APPLICATION_PATH . '/controllers/helpers');
5.    Use Zend Studio to create an Action Helper "Test" 
      placing the new file in the new folder
6.    Add code to the "direct()" method which returns an array of options from the application.ini file:
	$front = Zend_Controller_Front::getInstance();
	return $front->getParam('bootstrap')->getOptions();
7.    Call the action helper in both the index action of the index controller
      as well as in the index action of the guestbook controller
8.    Send the value of $config['email'] to the layout
9.    In the layout, add a footer: "Contact <?php echo $this->email; ?>"
10.   Test your modifications in the browser
REF: http://framework.zend.com/manual/en/zend.controller.actionhelpers.html

237 -------------------------------------------------------------------------------
Zend_Registry - used by other components
Uses class name as key
Uses $GLOBALS
see: zend_registry_test.php

239 -------------------------------------------------------------------------------
Q: Is registry persistent?
A: Normally per request, but could be saved to a session
NOTE: distinguish between Zend_Registry and $_SESSION and $GLOBALS

240 -------------------------------------------------------------------------------
DEMO: zend_registry_test.php
DEMO: using Zend_Registry to pass values between controllers
      http://guestbook.work/index/test

241 -------------------------------------------------------------------------------
see: Zend/View/Helper/Placeholder/Registry.php
Otherwise: it's not used in the WikiApp
CODEBREAK: Set a registry value	in the bootstrap and retrieve in the view script
1.	In guestbook.work application/Boostrap.php create a method _initDate()
2.	Set a registry value 'test'
3.	In application/views/scripts/index/index.phtml echo the registry value 'test'
4.	Test in browser

244 -------------------------------------------------------------------------------
Alternate approach:
NOTE: "php://output" = output buffer
(See: http://www.php.net/manual/en/wrappers.php)
$logger->setEventItem('ipAddress', sprintf("%u",ip2long($_SERVER['REMOTE_ADDR'])));
DEMO: zend_log_test.php

245 -------------------------------------------------------------------------------
RFC-3164
#s correspond to PEAR logging

248 -------------------------------------------------------------------------------
Formatters -- like printf format strings
Zend_Log_Formatter_Simple is the default formatter
DEMO: zend_log_test.php

249 -------------------------------------------------------------------------------
Priority Filters: allows that level or higher, denies lower
Q: Can you set the filters in the *.ini file?
A: Put filter in the $config object and then use it later
Zend_Log has a Firebug writer
Create an example of this
Wiki: errorController.php has logger + library/MyWiki Acl.php
+ Resources/logger.php
Find out where it's created in the Wiki app

250 -------------------------------------------------------------------------------
DEMO: zend_log_filter_instance.php

251 -------------------------------------------------------------------------------
SHOW: WikiApp - application - resources - Logger.php
CODEBREAK: Log guestbook.work signup success and failures
In application/controllers/GuestbookController sign action:
0.	Create a directory to contain the log
1.	Locate or create form validation if / then / else clause
2.	For the "then" clause: log "Success" at INFO log level
3.	For the "else" clause: log "Failure" at ALERT log level
4.	Sign the guestbook successfully a couple of times
5.	Enter some wrong values to trigger the failure clause
6.	Open a command shell and view the log

254 -------------------------------------------------------------------------------
SHOW: Models - DbTable - Users.php and Articles.php
Point out $_rowClass and $_referenceMap

255 -------------------------------------------------------------------------------
SHOW: Forms - Login.php - setDecorators() lets you add CSS tag info

258 -------------------------------------------------------------------------------
Two main tasks: Acl (permissions) and Auth (identity)

259 -------------------------------------------------------------------------------
ACL: ArticleController.php - 
	editAction lines 114 & 153
	_checkAcl()
(NOTE: in ZS, highlight the method and press F3
Note: line 43 of Acl.php = administrator has no params = ALL
AUTH: UserController.php - lines 27 - 42

260 -------------------------------------------------------------------------------
Example: bug tracking app: the bug is the resource
"list" and "view" are the rights
SHOW: library/MyWiki/Acl.php

WHO has access WHERE doing WHAT action
i.e. 
WHO = a user (role)
WHERE = an article (resource)
WHAT = create (right or permission)

261 -------------------------------------------------------------------------------
SHOW: library/MyWiki/Acl.php; note line 32
See: http://framework.zend.com/manual/en/zend.acl.html#zend.acl.introduction.resources

263 -------------------------------------------------------------------------------
Moves from the last defined to the first (i.e. from admin -> guest)
1st match causes the search to stop
NOTE: if $rights is omitted = ALL or ANY 
allow($role,$resource[,$rights]);
deny($role,$resource[,$rights]);
http://framework.zend.com/manual/en/zend.acl.introduction.html
DEMO: zend_acl_multi_test.php and also http://authdemo/

266 - 268 -------------------------------------------------------------------------
Take answers from 
http://files.zend.com/help/Zend-Framework/zend-framework.htm
Zend_Acl 2.1.5
SHOW: zend_acl_define_example.php
$acl->allow(role, resources, privileges, assert interface)
(see zend.acl.advanced.html#zend.acl.advanced.assertions)
DEMO: http://authdemo/

268 -------------------------------------------------------------------------------
See 2.1.6
This could be put into pre-dispatch to allow or deny access to controllers


269 -------------------------------------------------------------------------------
Zend_Auth has a dependency on Zend_Session (for persistence)

270 -------------------------------------------------------------------------------
DEMO: Zend/Auth/Adapter/Ldap.php
Note: The Zend_Auth class implements the Singleton pattern - only one instance of the class is available - through its static getInstance() method. This means that using the new operator and the clone keyword will not work with the Zend_Auth class; use Zend_Auth::getInstance() instead. 

DEMO: zend_auth_openid.php
REF: http://openid.net/get-an-openid/
REF: https://github.com/thebestsolution/ZendMultipleAuthentications

271 -------------------------------------------------------------------------------
docs 4.1.2
Current shipped adapters:
DbTable
Ldap
OpenId
InfoCard
HTTP simple and digest

274 -------------------------------------------------------------------------------
http://framework.zend.com/manual/en/zend.auth.introduction.html
In order to use an identity persistence storage class other than Zend_Auth_Storage_Session, a developer implements Zend_Auth_Storage_Interface.
See wikiapp - application/controllers/UserController.php lines 27 - 42

277 -------------------------------------------------------------------------------

278 -------------------------------------------------------------------------------

280 -------------------------------------------------------------------------------
[optional] CODEBREAK: zend_auth_dbtable_example.php
Ref: http://framework.zend.com/manual/en/zend.auth.adapter.dbtable.html
DEMO: http://authdemo/

281 -------------------------------------------------------------------------------
Library which leverages Facebook, Google and Twitter and Zend_Auth
https://github.com/thebestsolution/TBS-Zend-Library

283 -------------------------------------------------------------------------------
Various filters: htmlentities, phone numbers, ssn's, etc.

284 -------------------------------------------------------------------------------
Alnum, alphs, basename, digits, etc.
Q: Does it use filter_var()?
A: Clark says no
Like a combo of ctype_* is_* and regex classes
Packaged neatly and easier to use
NOTE: on BSD systems, RealPath won't fail unless the final component doesn't exist; in others, it will fail if any intervening directory doesn't exist

285 -------------------------------------------------------------------------------
Filter chain: use fluent interface
If you're using autoloading, avoid using "require_once"
Q: Is filtering multi-byte safe?
MVC usage: see Wikiapp - Forms - Login.php

286 -------------------------------------------------------------------------------
DEMO: zend_filter_email.php

289 -------------------------------------------------------------------------------
Zend_Validate docs 51.1.2

290 -------------------------------------------------------------------------------
Zend_Validate docs 51.3
Add an additional level of complication to challenge the students

292 -------------------------------------------------------------------------------
See: http://framework.zend.com/manual/en/zend.filter.input.html
Zend_Filter_Input provides a declarative interface to associate multiple filters and validators, apply them to collections of data, and to retrieve input values after they have been processed by the filters and validators. Values are returned in escaped format by default for safe HTML output.

Consider the metaphor that this class is a cage for external data. Data enter the application from external sources, such as HTTP request parameters, HTTP headers, a web service, or even read from a database or another file. Data are first put into the cage, and subsequently the application can access data only by telling the cage what the data should be and how they plan to use it. 


-----------------------------------------------------------------------------------
CODEBREAK: WikiApp
-----------------------------------------------------------------------------------


297 -------------------------------------------------------------------------------
Load on demand = no overhead until used

300 -------------------------------------------------------------------------------
WikiApp - application - views - helpers
ArticleHeader.php
Note: this app echos its output directly; normally a helper returns a string
SearchBox.php = returns a searchbox form as an object
Click on "default_Form_Search" and press F3 = Search.php
MenuLeft.php
See in view - scripts - index - index.phtml
	- menuLeft() and - searchBox()
NOTE: index.phtml line 9 = use of partials

301 -------------------------------------------------------------------------------
Zend_View - View Helpers - Initial Helpers 53.4.1
Zend_View_Helpers are created when defining stuff in Zend_Form
Q: clearDecorators()?
REF: http://blog.astrumfutura.com/archives/360-Example-Zend-Framework-Blog-Application-Tutorial-Part-6-Introduction-to-Zend_Form-and-Authentication-with-Zend_Auth.html
REF: http://www.webmaster-talk.com/php-forum/120843-zend-framework-zend_form-adding-fieldset.html
DEMO: http://formdemo/form/login
Example: echo $this->fieldset("Login",$this->form,array('class'=>'loginClass'));

303 -------------------------------------------------------------------------------
Show PHP Include Path - Zend Framework Library - Zend - View - Helper

306 -------------------------------------------------------------------------------
Example of url() view helper:
<a href="<?php
echo $this->url(
	array(
		'controller'	=> 'article',
		'action'	=> 'view',
		'title'		=> $this->article->title,
	    	'id'            => $this->article->articleId
	)
);
?>"><?php echo $this->escape(stripslashes($this->article->title)) ?></a>

307 -------------------------------------------------------------------------------
Each Zend_Form_Element uses the corresponding view helper to produce the HTML
You have the option of using these view helpers directly if you want:
(see: http://formdemo/form/userwithhelpers)

310 -------------------------------------------------------------------------------
5 rules:
1. Class naming:	Zend_View_Helper_HelperName
2. # methods and naming:at least one, helperName()
3. printing:		echo $this->helperName(); or <?= 
4. class filename:	HelperName.php (notice case)
5. paths:		Zend/View/Helper
public function setView(Zend_View_Interface $view) {
	$this->view = $view;
	return $this;
}
cf. Zend_Paginator - "Writing Custom Helpers"
NOTE: class persistence is done for you automatically if you use ZS to create view helper
Q: Best Practices tip -- WTF?
A: REF: http://wiki.ekini.net/main/Zend_view#Writing_Custom_Helpers
This "tip" is referring to setView().  What setView() does is to make 
the View Object available to the view helper.  The tip refers to the 
fact that if you want this object available in subsequent calls to 
the helper, you have to store it yourself if you want it available 
later on.

CODEBREAK [optional]
Create a view helper which returns formatted date and time

312 -------------------------------------------------------------------------------
http://framework.zend.com/manual/1.10/en/learning.view.placeholders.basics.html
Should be initialized in Bootstrap.php
http://framework.zend.com/manual/1.10/en/learning.view.placeholders.standard.html
Zend_View_Helper_* (i.e. Zend_View_Helper_Headscript)
Included: 
docType() = sets HTML doc type (i.e. XHTML1_STRICT)
headScript() = including javascript
headTitle() = page title 
headLink() = including a CSS
headStyle() = directly insert a string which has CSS in it
headMeta() = meta tags
inlineScript() = inherits from headScript; can contain javascript directly or file ref
Also view helpers: placeholders, partials, cycle, etc.
DEMO: http://codearchive.unlikelysource.local/
SHOW: Bootstrap.php, layout.phtml, index.phtml

313 -------------------------------------------------------------------------------
Then, in view script:
<!-- beginning ->
<?php $this->placeholder('nav')->captureStart(); ?>
<!-- content -->
<?php $this->placeholder('nav')->captureEnd(); ?>

SEE ALSO: http://weierophinney.net/matthew/archives/163-Using-Zend_View-Placeholders-to-Your-Advantage.html

315 -------------------------------------------------------------------------------
DEMO: http://codearchive.unlikelysource.local/
SHOW: CodeArchive - Views - Scripts - footer.pthml
	CodeArchive - Layouts - layout.phtml

317 -------------------------------------------------------------------------------
Plugins - already used even though not knowing it
Bootstrap uses it, for example
4.6 - Available resource plugins
http://framework.zend.com/manual/en/zend.application.available-resources.html

318 -------------------------------------------------------------------------------
Filters are plugins

319 -------------------------------------------------------------------------------
Validators are plugins

320 -------------------------------------------------------------------------------
Decorators are plugins

321 -------------------------------------------------------------------------------
Form elements are plugins

322 -------------------------------------------------------------------------------
http://framework.zend.com/manual/1.10/en/zend.loader.pluginloader.html
A number of Zend Framework components are pluggable, and allow loading of dynamic functionality by specifying a class prefix and path to class files that are not necessarily on the include_path or do not necessarily follow traditional naming conventions. * Zend_Loader_PluginLoader * provides common functionality for this process. 
Plugin loading can be an expensive operation. At its heart, it needs to loop through each prefix, then each path on the prefix, until it finds a file that matches -- and which defines the class expected. In cases where the file exists but does not define the class, an error will be added to the PHP error stack, which is also an expensive operation. The question then turns to: how can you keep the flexibility of plugins and also address performance?

Zend_Loader_PluginLoader offers an opt-in feature for just this situation, a class file include cache. When enabled, it will create a file that contains all successful includes which you can then call from your bootstrap. Using this strategy, you can greatly improve the performance of your production servers. 

http://framework.zend.com/manual/1.10/en/zend.translate.html
Generally, multi-lingual sites are very simple in their design. There are only four steps you would have to do:
   1. Decide which adapter you want to use;
	Misc: array,csv,gettext,ini
	XML: tbx,tmx,qt,xliff,xmltm
   2. Create your view and integrate Zend_Translate in your code;
   3. Create the source file from your code;
   4. Translate your source file to the desired language.

323 -------------------------------------------------------------------------------
Whole day Thursday devoted to coding
Hint: consult /usr/local/zend/var/log/php.log and other logs for invisible errors

324 -------------------------------------------------------------------------------
RIA = Rich Internet Applications
jquery, dojo
Look in "incubator" = stuff coming down the pipe
Different content types: i.e. text, command line, XML, etc.
All of these are covered in an advanced course
Still in the works

Other resources: spotifyrocks.other.bigfathead.com

For last day:
1.	Guide the class through wikiapp.work
2.	Show them where to start
3.	Have them tell you, as a group, what to do
4.	Direct them to start working on the next thing
5.	Do breakout sessions for 30 minutes
6.	Meet back again at the top of the hour and regroup

000 -------------------------------------------------------------------------------
Q & A:


000 -------------------------------------------------------------------------------
FIRST DAY HELLO WORLD PROJECT SETUP:

#1 
Here's how to fix the issue of link warnings appearing when using Zend Tool inside Zend Studio:

In Studio select Window->Preferences
Search for PHP Executables (using the filter)
Add a new entry with the settings in the screenshot
SEE: http://www.unlikelysource.com/images/StudioPrefs.jpg
    Name: Zend Server
    Executable Path: /usr/local/zend/bin/php
    PHP ini File: /usr/local/zend/etc/php.ini
    PHP Debugger: Zend Debugger
Make this the new default

Zend Tool should now work.

#2
Create a virtual host file for helloworld:
 
/etc/apache2/sites-available/helloworld:

<VirtualHost *>
    Servername helloworld
    ServerAdmin webmaster@localhost    
    DocumentRoot /workspace/helloworld/public
    <Directory />
        Options FollowSymLinks
        AllowOverride None
    </Directory>
    <Directory /workspace/helloworld/public>
        Options Indexes FollowSymLinks MultiViews
        AllowOverride All
        Order allow,deny
        allow from all
    </Directory>
    ErrorLog /var/log/apache2/error.log
    # Possible values include: debug, info, notice, warn, error, crit,
    # alert, emerg.
    LogLevel warn
    CustomLog /var/log/apache2/access.log combined
    ServerSignature On
</VirtualHost>

#3
Link the above conf file to sites-enabled:
sudo ln -s /etc/apache2/sites-available/helloworld 
     /etc/apache2/sites-enabled/009-helloworld

#4
Create an entry in /etc/hosts for "helloworld"
127.0.0.99      helloworld

HOW TO ACCESS MYSQL IN VM


HOW TO GET PHPMYADMIN RUNNING IN VM

From a terminal window:
1.	sudo -i
2.	apt-get install phpmyadmin
3.	Select "Apache" when asked
4.	ln -s /usr/share/phpmyadmin /var/www/phpmyadmin
5.	mkdir /var/run/mysqld
6.	ln -s /tmp/mysql.sock /var/run/mysqld/mysqld.sock
NOTE: may have to repeat #6 if you restart the VM

From browser: http://localhost/phpmyadmin
Login: root / password


Q & A ------------------------------------------------------------------------

Q: Is is possible to use ZF without mod_rewrite?
A: Yes.  See: 
http://www.zfforums.com/zend-framework-general-discussions-1/installation-configuration-3/apache-without-mod_rewrite-149.html
http://akrabat.com/zend-framework/zend-framework-urls-without-mod_rewrite/
http://stackoverflow.com/questions/13698/php-zend-mvc-without-mod-rewrite

Q: If you need something to happen BEFORE any headers are set, where do you do this?
A: Bootstrap;  i.e. when setting cookies, or working with sessions

Q: When using $this-> _forward(), when is the object instance unset, and does the controller always get instantiated twice?
A: (from Matthew) The dispatcher does not keep a registry of previous controllers. As such, each time through the dispatch loop, it instantiates a new controller, even if that controller has been referenced before.

The previous instance is never explicitly unset, but it goes out of scope when the dispatcher's dispatch() method finishes (which happens
between the action controller's postDispatch() and the front controller's postDispatch()).

Q: Given the following code:
> > 
> > class DispatchController extends Zend_Controller_Action {
> >     public function init() {  echo "<br />Init\n"; }
> >     public function preDispatch() { echo "<br />Pre Dispatch\n"; }
> >     public function postDispatch() { echo "<br />Post Dispatch\n"; }
> >     public function indexAction() {
> >         echo '<br />Before Forward';
> >         $this->_forward("test","dispatch");
> >         echo '<br />After Forward';
> >     }
> >     public function testAction() {
> >         echo '<br />' . Zend_Version::VERSION;
> >     }   
> >     public function redirectAction() {
> >         echo '<br />Before Redirect';
> >         $this->_redirect('/');
> >         echo '<br />After Redirect';
> >     }   
> > }
> > 
> > This is the output when this URL is launched: http://helloworld/dispatch/index
> > 
> > Init 
> > Init 
> > Pre Dispatch 
> > Before Forward
> > After Forward
> > Post Dispatch 
> > Test View
> > Pre Dispatch 
> > 1.10.6
> > Post Dispatch
> > 
> > The question is: why does the View show up *BEFORE* preDispatch()???
A: (from Matthew) Calling _forward() simply sets hints in the request object that another request will need to be dispatched; it does not actually dispatch it. As such, it cannot actually bounce you out of execution, either -- the only way to do that is to call "return". Since you didn't call "return", the method continues executing, which is why you see "after forward" occur.

For this reason, I usually recommend that you call "return" whenever you _forward() or redirect:

    return $this->_forward('test');
    return $this->_redirect('/');

The latter may seem unimportant... until you run your unit test suite, and get a view rendered. ;-) (Normally, redirection will call exit() on completion; we override that behavior in ControllerTestCase so that we can get a response and perform assertions on it.)

Q: Based on the output mentioned in the question above, why does the View show up *BEFORE* preDispatch()?
A: (from Matthew) Most likely it has to do with the order in which output buffering calls are made (notice that you have "Init" twice before
anything else -- also a symptom). 

Q: I noticed the DB config only "supports" one DB. How about multiple DBs?
A: See discussion: http://framework.zend.com/manual/en/zend.application.available-resources.html
A: http://framework.zend.com/manual/en/zend.application.available-resources.html#zend.application.available-resources.multidb
 Below is an example INI configuration that can be used to initialize two Db Connections.
      [production]
      resources.multidb.db1.adapter = "pdo_mysql"
      resources.multidb.db1.host = "localhost"
      resources.multidb.db1.username = "webuser"
      resources.multidb.db1.password = "XXXX"
      resources.multidb.db1.dbname = "db1"

      resources.multidb.db2.adapter = "pdo_pgsql"
      resources.multidb.db2.host = "example.com"
      resources.multidb.db2.username = "dba"
      resources.multidb.db2.password = "notthatpublic"
      resources.multidb.db2.dbname = "db2"
      resources.multidb.db2.default = true

Q: How can I use an XML config file in a standard ZF app?
A: Modify index.php as follows:
// Read config data
require_once 'Zend/Config.php';
require_once 'Zend/Config/Xml.php';
$config = new Zend_Config_Xml(APPLICATION_PATH . 
                              '/configs/application.xml', 
                              APPLICATION_ENV);

/** Zend_Application */
require_once 'Zend/Application.php';

// Create application, bootstrap, and run
$application = new Zend_Application(
    APPLICATION_ENV,
    // Use a Zend_Config object 
    $config
//    APPLICATION_PATH . '/configs/application.ini'
);

Q: On a find() what if you've got a compound key?
A: Specify the number of params in find() which equal the columns of the key
   (see zend_db_table_find_compound_key.php)

Q: Can you program app namespace in application.ini?
A: As of ZF 1.10.x --> 
appnamespace = "Application"

Q: How do you specify the error message?
A: $element->addErrorMessage()
A: $element->setErrorMessage() (same as add except that this clears the messages stack first)
A: $form->setDefaultTranslator(Zend_Translate $object)

Q: How do you clear form params after success?
A: $form->reset();

Q: Can I use getResource($db) to get an instance of the database connection?
A: Yes. From a controller, proceed as follows
	$bootstrap = $this->getInvokeArg('bootstrap');
	$db = $bootstrap->getPluginResource('db'); // instance of Zend_Db_Adapter
A: See also: http://weierophinney.net/matthew/archives/235-A-Simple-Resource-Injector-for-ZF-Action-Controllers.html

Q: What are the Zend_Auth_Result failure message codes?
A: Predefined constants: FAILURE, FAILURE_CREDENTIAL_INVALID, FAILURE_IDENTITY_AMBIGUOUS, FAILURE_IDENTITY_NOT_FOUND, FAILURE_UNCATEGORIZED, SUCCESS

Q: Why doesn't the view helper created in ZS extend Zend_View_Helper_Abstract?
A: ???

Q: MySql query optimizer.  Does this provide enough to bypass the profiler?
A: Not sure what this question means, but here is some reading on MySQL query tools
 vs. Zend_Db_Profiler   
http://www.xaprb.com/blog/2006/10/12/how-to-profile-a-query-in-mysql/
http://stackoverflow.com/questions/1275375/zend-framework-and-mysql-very-slow
http://www.techfounder.net/2008/10/12/profiling-queries-with-zend_db-and-optimizing-them-by-hand/
Also: read the section "Overriding Table Setup Methods" in 
http://framework.zend.com/manual/en/zend.db.table.html
The more you define "manually" = less work by ZF = better performance

Q: Do you have more info on table data gateway model?
A: http://geekswithblogs.net/flanakin/archive/2004/03/08/2633.aspx   
   http://www.longacre-scm.com/blog/index.php/2006/02/design-pattern-table-data-gateway
   http://css.dzone.com/books/practical-php-patterns-table

Q: Can action helper paths be programmed in application.ini?
A: Not as a resource. (???)

Q: How do you program db log resources?
A: You can configure some of the parameters, but will have a problem programming the db instance
resources.log.db.writerName = 'Db'
resources.log.db.writerParam.table = 'log_table'
resources.log.db.writerParam.columnMap.priority = 'lvl'
resources.log.db.writerParam.columnMap.message = 'msg'
resources.log.db.writerParam.db = ???
http://stackoverflow.com/questions/2485004/zend-framework-zend-log-via-application-ini-insert-on-a-non-object-error

Q: re: session locks: Will trying to change a locked session throw an exception, or just silently ignore the change?
A: throws an exception

Q: re: session expiration: can you set both seconds and hops for the same namespace?
A: Yes.  Whatever is triggered the soonest is what expires the session.

Q: What is the default escape method?
A: For Zend_View it's htmlspecialchars().  Use $view->setEscape() to change.

Q: Is there a doc somewhere that explains directory naming conventions?  ie. 'Models/DbTable'
A: http://framework.zend.com/manual/en/coding-standard.naming-conventions.html
A: http://zendframework.com/wiki/display/ZFDEV/ZF+Coding+Standards+%28RC%29

Q: In slide 310, what does the "tip" explain?
A: REF: http://wiki.ekini.net/main/Zend_view#Writing_Custom_Helpers
This "tip" is referring to setView().  What setView() does is to make the View Object available to the view helper.  The tip refers to the 
fact that if you want this object available in subsequent calls to  the helper, you have to store it yourself if you want it available 
later on.

Q: What kind of performance hit would multiple RSS subscribers make on a server?
A: ???

Q: What is a "pseudo decorator pattern" (slide #317)
A: ???

Q: Why is init() called again when doing _forward?
A: Because each _forward causes a new instance of the controller to be generated

Q: How do transactions fit into Zend_DB?
A: Transactions are handled by the adapter using the methods _beginTransaction(), _commit() and _rollback()
   You can access these methods directly off an instance of the adapter.  If you don't have this, then
   use ->getAdapter() first, and then one of the three

Q: What is the difference between join() and joinLeft() in a Zend_Db_Select?
A: join() is the same as joinInner().  The result only includes rows which satisfy the criteria.
   joinLeft() results in ALL rows of the "left" table, even if no rows in the right meet the critera.
   There is also joinRight(), joinFull(), joinCross() and joinNatural()
   see: http://framework.zend.com/manual/1.10/en/zend.db.select.html

Q: Is there a way to force a different view script?
A: $view->render('viewscript-filename');

Q: How to add comments to XML file
A: <!-- comment -->

Q: How does zend guard work with the MVC-model? Is there any benefit?
A: Zend Guard really has nothing to do with the MVC model - Zend Guard just encrypts code.

Q: Is there a way to create protected + signed pdf-files using zend-framework?
A: PDF Question:
REF: http://www.web-development-blog.com/archives/create-pdf-documents-online-with-tcpdf/
Additionally TCPDF includes tons of killer features that are missing  in mPDF (i.e: bidirectional-algorithm for RTL languages, digital signature, document encryption, pre-press utilities, native SVG support,  and much more).  AFAIK, the latest TCPDF release is able to convert HTML much better  than mPDF (at least for my purposes) and includes support for CSS files.
NOTE: same limitations apply to Zend_Pdf (except for compression, which is supported)

Q: How do you create a mixed case controller?
A: zf create controller testXyz
   1. creates TestXyzController.php
   2. creates directory views/scripts/test-xyz
   3. to invoke: http://some.url/test-xyz/index
A: Was fixed in ZF 1.10. 
   See: http://framework.zend.com/issues/browse/ZF-8394?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel
Example:
ted@ted:/var/www/HelloWorld$ zf create controller takeOne
Note: The canonical controller name that is used with other providers is "TakeOne"; not "takeOne" as supplied
Creating a controller at /var/www/HelloWorld/application/controllers/TakeOneController.php
Creating an index action method in controller TakeOne
Creating a view script for the index action method at /var/www/HelloWorld/application/views/scripts/take-one/index.phtml
Creating a controller test file at /var/www/HelloWorld/tests/application/controllers/TakeOneControllerTest.php
Updating project profile '/var/www/HelloWorld/.zfproject.xml'

Q: What happens if system is unable to locate auth source? exception?
A: Error code 0 (FAILURE) is returned.  An exception is not generated.

Q: When does ACL return 0 (FAILURE)?
A: Occurs if "An unexpected failure occurred" -- see zend_auth_ldap_fail.php

Q: Slide 275 -- what is the code used to add additional fields to identity?
A: In addition to the availability of the getIdentity() method upon the authentication result object, Zend_Auth_Adapter_DbTable also supports retrieving the table row upon authentication success:
      // Print the identity
      echo $result->getIdentity() . "\n\n";
      // Retrieve the result row
      $identity = $authAdapter->getResultRowObject();
      // And then the rest of the code on the slide follows

Q: Can I override existing Zend_Log priority levels?
A: Existing priorities cannot be overwritten (see zend_log_filter_instance.php)

Q: Is there a diagram you know of that shows detailedd ZF MVC app life cycle?
A: http://devzone.zend.com/article/11978

Q: Zend_Validate_x_y? x_y?
A: See FormDemo.  Example:
$className->addFilter('Word_SeparatorToSeparator', array('_', '/'))
	  ->setLabel('Enter a Class Name')
	  ->setAttrib('size', 60)
	  ->setDescription('Example: Zend_Feed_Pubsubhubbub_Model_ModelAbstract');

Q: Examples using ZF and phar

Q: How can you group clauses using Zend_Db_Select?
Zend_Db_Select automatically puts parentheses around each expression you specify using the where() or orWhere() methods. This helps to ensure that Boolean operator precedence does not cause unexpected results.

Example #20 Example of parenthesizing Boolean expressions
      // Build this query:
      //   SELECT product_id, product_name, price
      //   FROM "products"
      //   WHERE (price < 100.00 OR price > 500.00)
      //     AND (product_name = 'Apple')
      $minimumPrice = 100;
      $maximumPrice = 500;
      $prod = 'Apple';
      $select = $db->select()
                   ->from('products',
                          array('product_id', 'product_name', 'price'))
                   ->where("price < $minimumPrice OR price > $maximumPrice")
                   ->where('product_name = ?', $prod);

In the example above, the results would be quite different without the parentheses, because AND has higher precedence than OR. Zend_Db_Select applies the parentheses so the effect is that each expression in successive calls to the where() bind more tightly than the AND that combines the expressions. 
REF: http://framework.zend.com/manual/en/zend.db.select.html
Q: How can you do sub-selects using Zend_Db_Select?
/* Example SQL:
SELECT `akt`.`n` 
FROM (   
    SELECT `name` AS `n` 
    FROM `aktualne` 
    ) AS `akt` 
WHERE `akt`.`n` = '2008' 
$subSelect = $db->select()->from('aktualne', array('n' => 'name'));
*/
// Example Zend_Db_Select:
$select = $db->select()
                        ->from( array('akt' => $subSelect), array('n'))
                        ->where('akt.n = ?', 2008);

REF: http://zend-framework-community.634137.n4.nabble.com/Support-Zend-Db-Select-sub-selects-td674928.html

More complex example using both questions:
REF: http://www.zfforums.com/zend-framework-components-13/databases-20/sub-queries-2177.html

Q: What are the default classname - file associations (i.e. Plugin = plugins, Model = models, etc.)?
A: Look at the method initDefaultResourceTypes() in this file:
   Zend/Application/Module/Autoloader.php

Q: How do you configure ZS to use Zend_Tool?
A: In Studio select Window->Preferences - PHP - PHP Executables
   Select "Zend Server" (at the bottom of the list)
   Make this the new default

Q: Can disabled short tags in php.ini be overridden in application.ini?
A: Yes.  See http://www.php.net/manual/en/ini.core.php#ini.short-open-tag
   In the application.ini file: 
   phpSettings.short_open_tag = 1

Q: Can view scripts end in ".php" and ".phtml" both?
A: Default is *.phtml.  This can be overridden by ... ???
   Discussion on phtml: http://akrabat.com/php/questions-regarding-the-latest-tutorial-130/
   To change: modify the "viewSuffix " property of Zend_Controller_Action.
   I.e., if you want to use "php", from the controller, execute the following:
   $this->viewSuffix = "php";

Q: Is there a default escape for forms and views? How to set?
A: To escape output from the view you need to use $this->escape().  There is no default because the view might not be HTML.
   Zend_Form, on the other hand, uses htmlspecialchars() by default.
   On an element level, you can set do $element->setAttrib('escape', FALSE).  Note that slashes might be added at the PHP level.
   Check that the php.ini parameter "magic_quotes_gpc" is set off.
   REF: http://stackoverflow.com/questions/3621508/zend-form-setattribescape-false-not-working-help
   You can retrieve raw post values from $this->getRequest()->getParam('field')
   You can get unfiltered form values as $form->getUnfilteredValue('field')
   Also, the value echoed back in the "value=" attribute is filtered by Zend_View.  
   This can be overridden using $this->view->setEscape()
   (defaults to htmlspecialchars())
   SEE: formdemo.zip on codearchive

Q: Why do we need getBootStrap() in this example, but bootstrap() in other? Also what is the exact function of run()?
A: The purpose of bootstrap() is to *run* the bootstrap process.
   getBootStrap() retrieves an instance of the bootstrap process (from which we can bootstrap individual items or obtain resources)
   run() launches the Front Controller
   REF: http://framework.zend.com/manual/en/zend.application.theory-of-operation.html

Q: How does ZF deal with multiple words in class name?
A: URL should use a "-" and lower case letter ("TestOne" => "test-one")
   Same for view script directory.

Q: How do you create a mixed case controller?
A: zf create controller testXyz
   - or -
   zf create controller TestXyz
   1. creates TestXyzController.php
   2. creates directory views/scripts/test-xyz
   3. to invoke: http://some.url/test-xyz/index
A: Was fixed in ZF 1.10. 
   See: http://framework.zend.com/issues/browse/ZF-8394?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel
Example:
ted@ted:/var/www/HelloWorld$ zf create controller takeOne
Note: The canonical controller name that is used with other providers is "TakeOne"; not "takeOne" as supplied
Creating a controller at /var/www/HelloWorld/application/controllers/TakeOneController.php
Creating an index action method in controller TakeOne
Creating a view script for the index action method at /var/www/HelloWorld/application/views/scripts/take-one/index.phtml
Creating a controller test file at /var/www/HelloWorld/tests/application/controllers/TakeOneControllerTest.php
Updating project profile '/var/www/HelloWorld/.zfproject.xml'

Q: I've almost always used Pear DB. Pear to PDO is apples and oranges?
A: Pear DB has been deprecated in favor of MDB2 (http://pear.php.net/package/MDB2)
   Looks like a cross between PDO and Zend_Db.  Could not see equivalent of Zend_Db_Table.

Q: Where do I find the API docs for describeTable()?
A: http://framework.zend.com/apidoc/1.11/Zend_Db_Adapter_Abstract.html#Zend_Db_Adapter_Abstract::describeTable()

Q: Why is auto quoting not enabled for insert and update statements the way it's enabled for select?
A: Partial answer from Bill Karwin (ZF Zend_Db team)
   http://stackoverflow.com/questions/975009/avoiding-mysql-injections-with-the-zend-db-class/985316#985316

Q: What is the short cut for $this->getRequest()->getParams()
A: _getParams()

Q: Why do controllers not need a classname prefix?
A: No namespacing is required for controllers in the default module.
   See: http://framework.zend.com/manual/en/zend.controller.modular.html
   Also note in application.ini:
   resources.frontController.controllerDirectory = APPLICATION_PATH "/controllers"

Q: Can I set up multiple namespaces in the bootstrap?
A: $autoloader = Zend_Loader_Autoloader::getInstance();
   $autoloader->registerNamespace('My_First_');
   $autoloader->registerNamespace('My_Second_');
   $autoloader->setFallbackAutoloader(true);
	-- or --
   In application.ini (ZF 1.10+):
   autoloadernamespaces.0 = "Zend_"
   autoloadernamespaces.1 = "ZendX_"
   autoloadernamespaces.2 = "My_First_"
   autoloadernamespaces.3 = "My_Second_"

Q: How do I disable the view renderer and layout?
A: $this->_helper->viewRenderer->setNoRender();
   $this->_helper->layout()->disableLayout();

Q: Doc ref for plugins -- Kevin's article
A: http://devzone.zend.com/article/11978 (MVC Lifecycle - Plugins - Kevin Schroeder)

Q: So the current zend_form's validator is all happening on the server-side, so all the javascript stuff is just helpful UI for the user, but in the end, it doesn't help you if you can't validate dates across fields on the server
A: Have a look at an implementation of "decoupling" validation from forms:
   REF: http://lebensold.net/development/decoupled-validation-with-zend_form-zend_validate-and-zend-mvc
   REF: http://www.zendcasts.com/encapsulating-business-rules-with-zend_validate/2010/03/
   REF: http://www.zend.com/topics/2008-03-05-Zend-Form.pdf

Q: 'zf create model guestbook' did not work on the command line.
A: Here are some examples from the advanced class:
# Students, PlEASE NOTE: you should edit the application.ini file and change
# the db path name to read: APPLICATION_PATH "/../data/db/wikiapp.sqlite"
zf configure dbadapter "adapter=Pdo_Sqlite&dbname=${TARGET_BASE_DIR}/${1}/data/db/${DBNAME}"
# Note that you'll get all DbTable models created in the wiki module this way,
# which may not be what you want (see application/models/DbTable/User.php and
# application/modules/models/DbTable/User.php in wikiapp.work, for example)
zf create dbtable.from-database
# Create Application Domain Models
zf create model User
zf create model CurrentUser

Q: Why can't you use Zend_Tool from inside Zend Studio?
A: You can -- just make sure you "cd" to the correct project first and use the correct syntax.

Q: Web reference for Zend_Tool providers?
A: http://weierophinney.net/matthew/archives/242-Creating-Zend_Tool-Providers.html

Q: Can view scripts end in ".php" and ".phtml" both?
A: Default is *.phtml.  This can be overridden by ... ???
   Discussion on phtml: http://akrabat.com/php/questions-regarding-the-latest-tutorial-130/
   To change: modify the "viewSuffix " property of Zend_Controller_Action.
   I.e., if you want to use "php", from the controller, execute the following:
   $this->viewSuffix = "php";

Q: RE: table relationships, is it loading it in memory, or querying the db?
A: Ran profiler on relationships; does background query.
   See: zend_db_table_many_to_many.php on the code archive (with profiler enabled)

Q: Is setIgnore the same as not setting validators?
A: Every Zend_Form_Element instance has a method setIgnore(). Also you can pass a flag 'ignore' 
   equal to True in the $options array parameter in the constructor, respecting the framework 
   convention, to obtain the same result.
   The purpose of this option is to exclude the value assumed by this input from the result 
   returned by getValues(), even if you pass to isValid() the entire POST request (which contains 
   a value for this specific element since it was present on the client side and filled for other 
   purposes). This option comes handy when using Zend_Form_Element_Captcha or Zend_Form_Element_Submit.
   See: http://giorgiosironi.blogspot.com/2009/10/advanced-zendform-usage.html
A: See also: http://weierophinney.net/matthew/archives/200-Using-Zend_Form-in-Your-Models.html
Q: So the default is true?
A: No: the default is FALSE.

Q: Can we use the "*" tag anywhere when using this format to set filter/validators?
A: There is a form level method for filters but not for validators.  Unfortunately this is a *set* method, however, which
   means it overrides existing element filters.
   See: http://stackoverflow.com/questions/4670806/zend-form-and-setelementfilters-with-zend-filter-stringtrim-does-not-trim
   Also see zend_form_set_element_filters.php on the code archive
A: You could, alternatively, use Zend_Filter_Input

Q: Can you use Zend_Config_Writer to convert from ini to xml?
A: Yes.  See zend_config_writer_xml.php on code archive

Q: RE: Zend_Db_Table: does that make one connection per request, or does the connect persist?
A: First read these:
   http://meta.wikimedia.org/wiki/Why_persistent_connections_are_bad
   http://www.mysqlperformanceblog.com/2006/11/12/are-php-persistent-connections-evil/
A: By default one connection per request, but persistent connections are supported.
   See http://framework.zend.com/manual/1.11/en/zend.db.adapter.html
   Please read the note about the evils of persistent connections:
	Please note that using persistent connections can cause an excess of idle connections 
	on the RDBMS server, which causes more problems than any performance gain you might 
	achieve by reducing the overhead of making connections. 
   Example #33 Using the Persitence Flag with the Oracle Adapter
      $db = Zend_Db::factory('Oracle', array(
          'host'       => '127.0.0.1',
          'username'   => 'webuser',
          'password'   => 'xxxxxxxx',
          'dbname'     => 'test',
          'persistent' => true
      ));

Q: What are some pros and cons of using Zend_Db_Table?
A: The describeTable() method returns an associative array of metadata about a table. 
   Specify the name of the table as a string in the first argument to this method. 
   The second argument is optional, and names the schema in which the table exists. 
   PRO: saves you having to hard-code info on the table
   CON: this method is called once per request cycle if you're using Zend_Db_Table

Q: What is the syntax for retrieving $_GET and $_POST values?
A: $this->getRequest()->getQuery('param') = $_GET
   $this->getRequest()->getPost('param') = $_POST
   See docs for Zend_Controller_Request_Http

Q: Why does the autoloader map a class name of "*Model*" to the "models" directory?
A: Zend_Application_Module_Autoloader defines "resource types" which define classname to filesystem mappings.
   i.e. *Model_* => models    *

Q: RE: Zend_Auth_Adapter_DbTable constructor: why does it need the ? for the 4th parameter?
A: The "?" is a placeholder for the credential.  Example on the slide won't work.  More common examples:
   $adapter = new Zend_Auth_Adapter_DbTable($db, 'users', 'username', 'password', 'MD5(?)');
   -- or --
   $adapter = new Zend_Auth_Adapter_DbTable($db, 'users', 'username', 'password', 
					    "MD5(CONCAT('" . Zend_Registry::get('staticSalt') . "', ?, password_salt))");
   See: http://framework.zend.com/manual/en/zend.auth.adapter.dbtable.html

Q: Also, is there something like insert-from-select?
A: Not that I am aware.

Q: Is there a 2nd param to registerNamespace() in order to specify a path?
A: No.  Anything you register must be either under library, or in the include_path.
   See also this article about autoloading: http://devzone.zend.com/article/4525
A: Another technique is to program the autoloader in the bootstrap as follows:
    //See guestbook/application/Bootstrap.php
    protected function _initAutoload()
    {
        $autoloader = new Zend_Application_Module_Autoloader(array(
            'namespace' => 'Default',
            'basePath'  => dirname(__FILE__),
        ));
        return $autoloader;
    }

Q: PDO Mysql connect error !!!!!!!!!
I can not change socket path in mysql config.. can you please give me alternate solution of below problem... ? 

Fatal error: 
Uncaught exception 'PDOException' with message 'SQLSTATE[HY000] [2002] Can't connect to local MySQL server through socket '/tmp/mysql.sock' (13)' in 
/var/www/XXXXX/library/Zend/Db/Adapter/Pdo/Abstract.php:129 Stack trace: #0 
/var/www/XXXXX/library/Zend/Db/Adapter/Pdo/Abstract.php(129):PDO->__construct('mysql:host=loca...', 'XXXXX', 'XXXXX', Array) 
#1 /var/www/XXXXX/library/Zend/Db/Adapter/Pdo/Mysql.php(109):Zend_Db_Adapter_Pdo_Abstract->_connect() 
#2 /var/www/XXXXX/library/Zend/Db/Adapter/Abstract.php(459): Zend_Db_Adapter_Pdo_Mysql->_connect() 
#3 /var/www/XXXXX/library/Zend/Db/Adapter/Pdo/Abstract.php(238): Zend_Db_Adapter_Abstract->query('DESCRIBE `tbl_s...', Array) 
#4 /var/www/XXXXX/library/Zend/Db/Adapter/Pdo/Mysql.php(169): Zend_Db_Adapter_Pdo_Abstract->query('DESCRIBE `tbl_s...') 
#5 /var/www/XXXXX/library/Zend/Db/Table/Abstract.php(835): Zend_Db_Adapter_Pdo_Mysql->describeTable('tbl_setting', NULL) 
#6 /var/www/XXXX/library/Zend/Db/Table/Abstract.php(857): Zend_Db_Table_Ab in /var/www/XXXXX/library/Zend/Controller/Plugin/Broker.php on line 336 

A: Try adding this line to your application.ini file: 
resources.db.params.unix_socket = "/var/run/mysqld/mysqld.sock"

Q: re: Zend_Config: $this->getInvokeArg('bootstrap')->getOption('username.first'); Or, how do I access the heirarchical data
A: See:http://blog.vandenbos.org/2009/07/07/zend-framework-module-config/
   $this->getInvokeArg('bootstrap')
 	->getResource('modules')
        ->offsetGet('modulenamehere')
	->getOptions();

Q: Does Zend_Db_Select support WITH()?
A: ZF 1.11.11 does not.  You have a couple of options, however:
   (1) rewrite the "WITH ... " statement using nested SELECT statements
       see: REF: http://stackoverflow.com/questions/2843168/how-to-create-zend-db-select-with-nested-queries
   (2) bypass Zend_Db_Select and insert SQL directly into $db->query($sql) or $db->fetchAll($sql)

Q: Did you find a way with zend to read the logs "Zend_Log_Reader" to create a log viewer page?
A: There is no class Zend_Log_Reader.  Zend_Log is designed to write to log files not to read them.
   In order to read log files you would access the as appropriate to the writer.  If a stream writer,
   you could use the fopen() command.  If writing to a database, you could use Zend_Db_Table.
   In order to control pagination use Zend_Paginator.

Q: How do you set up a row save using NOW()? It supports NOW, no?
http://www.sqlite.org/lang_datefunc.html says NOW is supported by SQLite
I want to add that to my insert.
No, no, it's a function. Insert [...] VALUES ('foo', NOW, 'bar');
A: You will notice from the above documentation page (i.e. lang_datefunc.html) that NOW
   is actually keyword which serves an argument to the SQLite date/time functions.  
   The functions mentioned in the documentation include date(), time(), datetime(), and julianday().
   All of the examples given are using a SELECT statement (but not INSERT!).  
   Zend_Db_Select supports SQL functions in the 2nd argument in the $select->from(xxx, yyy) method.  
   Here is an example using SQLite 'now':
   $select = $db->select()->from('xyz', array('now' => "date('now')");
   If you echo this statement you will see: SELECT date('now') AS `now` FROM `xyz`

Q: Does Zend_Db_Select support nested queries?
A: Yes.  Use Zend_Db_Expr.  
   REF: http://stackoverflow.com/questions/2843168/how-to-create-zend-db-select-with-nested-queries

Q: Where is the MyWiki_ namespace defined?
A: pluginPaths.MyWiki_Resource in app.ini

Q: How do you set the timezone in the application.ini? I ended up setting a config option. 
   Then created an _init in the bootstrap and used Zend_Date::setTimeZone($this->getOption('datetime.timezone'));  
   Is there a better way to do this?
A: You can add this to your application.ini file:
   ;; using whatever region/city is appropriate:
   phpSettings.date.timezone = "Europe/London"

Q: We tried using the zend framework Zend_Db_Adapter_Oracle 
   but i dont have the oci extension in our php extensions folder any idea where i can get that?
A: The oci8 PHP database extension is included with the primary PHP download obtainable from php.net
   REF: http://php.net/downloads.php
   To enable the OCI8 extension, configure PHP with the option --with-oci8
   REF: http://uk.php.net/manual/en/oci8.installation.php

Q: Is the lock state, a state in the zend framework or an intristic part of the session?
A: Session namespace locks and expiration features are not part of PHP sessions, rather are
   implemented in Zend_Session_Namespace (see source code).  When creating a new
   Zend_Session_Namespace object, each namespace key is implemented as a singleton.

Q: Is the lock state like having an expiry against a key in redis for example?
   ie if I was sharing the session across servers (LB')d would the lock also be shared?
A: No: locks are implemented strictly inside Zend_Session_Namespace.
   REF: sessiondemo

Q: When you access a locked session is an exception thrown?
A: Yes.  See source code for Zend_Session_Namespace

Q: Does someone fixed the mouse scroller issue with VMWare?
A: sudo gedit /etc/X11/xorg.confScroll down (its not far, perhaps 20 - 30 lines) till you see a block that looks like this:Section "InputDevice" Identifier "Configured Mouse" Driver "vmmouse" [.. blah blah blah ..] EndSectionReplace that whole section with this:Section "InputDevice" Identifier "Configured Mouse" Driver "vmmouse" Option "CorePointer" Option "Device" "/dev/input/mice" Option "Protocol" "ImPS/2" Option "Buttons" "5" Option "ZAxisMapping" "4 5" EndSectionSave the file, then close all your apps and hit Ctrl+Alt+Backspace. X restarts within a few seconds, and youre back up and running. Scrolling should now be possible!

Q: When the error controller kicks in, does it return a 404?
A: Depends on the error message.  It will return a number of different codes, include 404.
   See ErrorController.php

Q: How do I access the view object from Bootstrap.php?
A: Add this line to application.ini:
   resources.view[] = ""
   Then, in Bootstrap.php:
   protected function _initView()
   {
        $this->bootstrap('view');	// only do this ONCE in Bootstrap.php!!!
        $view = $this->getResource('view');
	$view->someVariable = 'Some Value';
	$view->addHelperPath('path/to/helpers', 'Custom_Helper_Prefix');
   }

Q: Can I set up multiple namespaces in the bootstrap?
A: 
   protected function _initAutoload()
   {
   $autoloader = Zend_Loader_Autoloader::getInstance();
   $autoloader->registerNamespace('My_First_');
   $autoloader->registerNamespace('My_Second_');
   $autoloader->setFallbackAutoloader(true);
   return $autoloader;
   }
	-- or --
   In application.ini (ZF 1.10+):
   autoloadernamespaces.0 = "Zend_"
   autoloadernamespaces.1 = "ZendX_"
   autoloadernamespaces.2 = "My_First_"
   autoloadernamespaces.3 = "My_Second_"

Q: How to get app.ini params from front controller?
A: $options = $this->getFrontController()->getParam('bootstrap')->getOptions();

Q: What is the syntax for retrieving $_GET and $_POST values?
A: $this->getRequest()->getQuery('param') = $_GET
   $this->getRequest()->getPost('param') = $_POST
   See docs for Zend_Controller_Request_Http

Q: Why does the autoloader map a class name of "*Model*" to the "models" directory?
A: Zend_Application_Module_Autoloader defines "resource types" which define classname to filesystem mappings.
   i.e. *Model_* => models    *

Q: Why am I getting an "undefined index 'id'" when writing data in the forms lab?
A: Have to remove the reference to $_cols in the guestbook table model class!

Q: Matthew's article on re-using bootstrap resources
A: Bootstrap Resource Plugins: http://mwop.net/blog/231-Creating-Re-Usable-Zend_Application-Resource-Plugins.html

Q: Example of configuring router from Bootstrap.php
A: See routedemo.zip on code archive
	
Q: Can you reset hops or seconds in Zend_Session_Namespace and still retain session data?
A: Yes, but you need to re-issue $sessionNamespace->setExpirationSeconds(xxx) *before* current namespace expires.

Q: Is there a good way to create nested select statements? how so? could i join with a nexted select?
A: See http://stackoverflow.com/questions/1340564/writing-a-subquery-using-zend-db
A: See last answer in: http://stackoverflow.com/questions/1718888/zend-db-table-subquery

Q: Can the value for the table be another nested select oobject?
A: No: the $select->from() clause requires the 1st param to be either a string (or a Zend_Db_Expr object, which implements _toString())
   which specifies a table name, or an array, where the key = the alias, and the value = the table name

Q: How complicated can the wheres get as far as combining ands and ors e.g. WHERE ((x or y) and (z or b))?
A: http://stackoverflow.com/questions/2795344/multiple-nested-select-where-with-zend-db-select
A: http://stackoverflow.com/questions/1179279/grouping-where-clauses-with-zend-db-table-abstract

Q: Can you use Zend_Db_Table relationships to effect a cascading delete?
A: Yes.  See: http://framework.zend.com/manual/1.12/en/zend.db.table.relationships.html#zend.db.table.relationships.cascading

Q: RE: zend_log_writer + zend_log_formatter_xml, will XML append to root node?
A: Each entry is a self-contained XML file which includes the root node.
   You can override the root node.




SOLUTIONS -----------------------------------------------------------------

<?php

class Application_Form_Guestbook extends Zend_Form
{

    public function init()
    {
        // email and comment fields
        $emailElement = new Zend_Form_Element_Text('email');
        $emailElement->addValidator('EmailAddress')
                     ->setRequired(TRUE)
                     ->setLabel('Email Address')
                     ->addFilter('StringToLower')
                     ->addFilter('StringTrim');
        $commentElement = new Zend_Form_Element_Textarea('comment');
        $commentElement->setRequired(TRUE)
                       ->setLabel('Comments')
//                       ->addFilter('PregReplace', array('match' => '/.*/', 'replace' => ))
                         ->setAttribs(array('rows' => 4, 'cols' => 40))
                         ->addFilter('StripTags')
                         ->addValidator('StringLength', array(255));
          $captcha = new Zend_Captcha_Image('captchaImage');
          $captcha->setFont(APPLICATION_PATH . '/fonts/VeraBd.ttf')
                  ->setWordlen(5)
                  ->setDotNoiseLevel(60)
                  ->setLineNoiseLevel(3)
                  ->setHeight(60)
                  ->setExpiration(300)
                  ->setWidth(200)
                  ->setImgDir(APPLICATION_PATH . '/../public/captcha')
                  ->setImgUrl('http://guestbook.work/captcha')
                  ->setFontSize(24)
                  ->setTimeout(300);
          $captchaElement = new Zend_Form_Element_Captcha('captcha', array('captcha' => $captcha));
        $captchaElement->setLabel('Please enter the 5 letters displayed below:')
                       ->setRequired(true);
        $hashElement = new Zend_Form_Element_Hash('hash');       
        $submitElement = new Zend_Form_Element_Submit('submit');
          $submitElement->setLabel('Sign')
                        ->setIgnore(TRUE);
          $this->addElements(array($hashElement,
                                   $emailElement, 
                                   $commentElement, 
                                   $captchaElement,
                                   $submitElement));
          $this->setMethod('POST');
    }

}

// For GuestbookController.php see below

application/views/scripts/guestbook/sign.phtml:

<!--  Need this style to move text input field below CAPTCHA image -->
<style>
#captcha-input {
    margin: 0 1000px 0 0;
    clear:both;
}
</style>
<?php echo $this->form; ?>

<?php

class GuestbookController extends Zend_Controller_Action
{

    public function init()
    {
        /* Initialize action controller here */
    }

    public function indexAction()
    {
        $table = Application_Model_DbTable_Guestbook::getInstance();
        $this->view->list = $table->getList();
    }

    public function signAction()
    {
        $table = Application_Model_DbTable_Guestbook::getInstance();
        $max = $this->getInvokeArg('bootstrap')->getOption('max_attempts');
        $request = $this->getRequest();
        $form = new Application_Form_Guestbook();
        if ($request->isPost()) {
            if ($form->isValid($request->getPost())) {
                // save to the database
                $row = $table->createRow($form->getValues());
                $row->save();
                $this->view->message = 'Thanks for signing the guestbook!';
                $this->_forward('index', 'guestbook');
            } else {
                $counter = new Zend_Session_Namespace('counter');
                if (!isset($counter->pageHits)) {
                    $counter->pageHits = 0;
                } else {
                     if ($counter->pageHits > $max) {
                        $counter->pageHits = 0;
                         throw new Zend_Exception('Exceeded Attempts!');
                    } else {
                        $counter->pageHits++;
                    }
                }
            }
        }
        $this->view->form = $form;
    }


}

<?php

class Application_Model_DbTable_Guestbook extends Zend_Db_Table_Abstract
{

    protected $_name = 'guestbook';
    protected $_primary = 'id';
    protected $_rowClass = 'Application_Model_Row_Guestbook';
    protected static $_instance = NULL;
    
    /**
     * 
     * Produces a list of guests
     * @return Zend_Db_Table_Rowset $list
     */
    public function getList()
    {
        return $this->fetchAll();
    }

    public static function getInstance()
    {
        if (!self::$_instance) {
            self::$_instance = new self();
        }
        return self::$_instance;
    } 
}

<?php
class Application_Model_Row_Guestbook extends Zend_Db_Table_Row_Abstract
{
    public function getEmail()
    {
        return $this->email;
    }
    public function getComment()
    {
        return $this->comment;
    }
    public function save()
    {
        $this->created = date('Y-m-d H:i:s');
        parent::save();
    }
}

application/views/scripts/guestbook/index.phtml:

<?php if (isset($this->message)) echo $this->escape($this->message); ?>
<ul>
<?php foreach ($this->list as $row) { ?>
    <li>
    <?php echo $row->getEmail(); ?>
    <br />
    <?php echo $row->getComment(); ?>
    </li>
<?php } ?>
</ul>

// solution to Zend_Session lab: goes in GuestbookController.php:

    public function signAction()
    {
        $max = $this->getInvokeArg('bootstrap')->getOption('max_attempts');
        $request = $this->getRequest();
        if ($request->isPost()) {
            $counter = new Zend_Session_Namespace('counter');
            if (!isset($counter->pageHits)) {
                $counter->pageHits = 0;
            } else {
                 if ($counter->pageHits > $max) {
                    $counter->pageHits = 0;
                     throw new Zend_Exception('Exceeded Attempts!');
                } else {
                    $counter->pageHits++;
                }
            }
        }
    }


CODEBREAK M10Ex5:

// possible solution
<?php
class default_Plugin_CheckAction extends Zend_Controller_Plugin_Abstract
{
    public function preDispatch(Zend_Controller_Request_Abstract $request)
    {
        $controller = $request->getControllerName();
        $action = $request->getActionName();
        $username = 'Guest';
        $auth = Zend_Auth::getInstance();
        if ($auth->hasIdentity()) {
             $username = $auth->getIdentity()->username;
        }
        $acl = Zend_Registry::get('acl');
          if (!$acl->isAllowed($username, $controller, $action)) {
            $request->setControllerName('user');
            $request->setActionName('denied');
        }
    }
}

// goes in Bootstrap.php:

    protected function _initAcl()
    {
        $acl = new MyWiki_Acl();
        Zend_Registry::set('acl', $acl);
    }
   
    protected function _initAclCheck()
    {
      $front = Zend_Controller_Front::getInstance();
      $front->registerPlugin(new default_Plugin_CheckAction());
    }

// changes to Article Controller.php

    protected function _checkAcl($title)
    {
        return true;
    }

// add to UserController.php:

    public function deniedAction()
    {
        // action body
    }

// denied.phtml

<br /><br />
<div id="view-content">
    <p>
    <b>NOTE:</b>
    <br />
    You must be logged in to view history and edit articles!
    </p>
</div>

// modified MyWiki_Acl

<?php
/**
 * This file defines Access Controls for the WIKI application.
 * The application basically has only two types of users
 * Administrator and WIKI user
 * A Guest is allowed to view, create new articles and edit existing articles.
 * While the Administrator can additionally create new WIKI Users 
 */

class MyWiki_Acl extends Zend_Acl
{
    public function __construct()
    {
    	try {
            // Define Roles guest, zenduser inherits from guest, and admin
            $this->addRole(new Zend_Acl_Role('Guest'))
                 ->addRole(new Zend_Acl_Role('zenduser'), 'Guest')
                 ->addRole(new Zend_Acl_Role('admin'));
            // define controllers as resources
            $this->add(new Zend_Acl_Resource('article'));
            $this->add(new Zend_Acl_Resource('error'));
            $this->add(new Zend_Acl_Resource('index'));
            $this->add(new Zend_Acl_Resource('user'));
            $this->add(new Zend_Acl_Resource('help'));
            $this->add(new Zend_Acl_Resource('recent-changes'));
            // Assign access control for the resources
            // Guest user only has view privileges
            $this->allow('Guest', 'index');
            $this->allow('Guest', 'user');
            $this->allow('Guest', 'help');
            $this->allow('Guest', 'article', 'view');
            $this->deny('Guest', 'article');
            // the user zenduser can create, view history, edit + inherits from guest
            $this->allow('zenduser', 'article', array('newarticle', 'viewhistory', 'edit'));
            $this->allow('zenduser', 'recent-changes');
            // The user Administrator has access to all resources
            $this->allow('admin');
              // Allow everyone to access the error resource
            $this->allow(null, 'error');
        } catch (Zend_Acl_Exception $e) {
            Zend_Controller_Front::getInstance()->getParam('bootstrap')->getResource('logger')->getLogger()->err($e->getMessage());
            throw $e;
        }
    }
}


CLOUD NOTES ----------------------------------------------------------------

Always best at the beginning of your editing session to open project properties, select "Remote Server Settings" and reselect the "Upload on Save" setting. Even though it is already set, do it again!  Every time you begin a new editing session.

M2Ex1 through M2Ex3
For cloud environment, fastest and easiest approach is to create an empty ZF Application in the cloud container, and download it to Studio.  The Apache RewriteBase directive, etc. will already be set in the application.

The ZF commands work fine in Studio ZF Console, but there is no need to "cd" to the appropriate project directory.  Just make sure you click the Studio project name prior to running ZF Console.

M3Ex1 I have not gotten profiling or remote debugging to work in OSX on cloud yet, but that is because OSX requires corkscrew for SSH tunneling over HTTP, Corkscrew is available only by installing MacPorts.  Windows and Linux instructions for remote debugging/SSH tunneling are available from Cloud Help pages.  They instructions do work for Windows and Linux.

M4Ex3 See M3Ex1 above regarding tunneling setup.

M5Ex2 I just Zend_Debug::dump() the config object settings as an array to show the structure of the config keys and values. Put this in layout.

M5Ex3 Can copy the database file from using local file manager from one Studio project to the other, and then upload to the new cloud application.

M5Ex5 Additional thing I do is Zend_Debug::dump() the $_SESSION array in the layout to show the namespaces when filling out the form, etc.

M6Ex1 Ignore the extra debug application.ini section, if you like, and use development.

M6Ex4 I start showing the wikiapp, if I haven't already by now.

M9Ex1 In wikiapp, Zend_Registry is only used internally by ZF components, not by the application itself.  If you have time, you can stick the config object in there, but it is six of one, half a dozen of the other.  Can get instance of config object at any time, so we're still creating an object to get at the config.  Still, it demos using Zend_Registry.

M9Ex2 Easy-peasy.

M10Ex1  The ACL in the wikiapp is simply stupid.  I've been looking for scraps of time to rewrite it, and create a new snapshot.  The demo is easy, but the ACL is stupid.

M10Ex3 Easy-peasy.

M10Ex5 Need to make sure everyone understands Front Controller plugins before doing this exercise.  Time will be your enemy by the time you get to this exercise, but try to make sure they don't just copy/paste the ACL.

M10Ex8 Any simple filtering will do.

M11Ex1 Lots of opportunities to show view helpers, partials, placeholders, whatever you have time for.  Probably only have time for view helpers.

CODEBREAKS ----------------------------------------------------------------

CODEBREAK: DAY ONE HELLO WORLD PROJECT SETUP

Make sure 640M of RAM is allocated to the VM (1G is better):
1. If the VM was running but suspended, be sure to do a proper shutdown of the VM 
   by pressing the red "power" button and selecting "Shutdown"
2. From the VM menu reconfigure the VM for 640M of RAM:
   A. Edit Virtual Machine Settings
   B. Hardware - Memory
   C. Memory for this virtual machine: 640M (or more if you have > 2 GB of RAM on your host)
3. Save

Set up your keyboard:
1.  Click on the black terminal icon to open a command shell terminal
2.  Select the country code of your keyboard
3.  Enter the "root" user password which is "password"
4.  Type "exit" to close the terminal shell
5.  If your keyboard doesn't match those on the list:
    From the top panel: Preferences - Keyboard - Layouts - Add - [choose layout + variant] - Add

Confirm Apache Config:
1.    Confirm that an Apache vhost file exists for helloworld
    ls -l /etc/apache2/sites-available
    ls -l /etc/apache2/sites-enabled
2.    Confirm that a hosts file entry exists for helloworld
    cat /etc/hosts

From Zend Studio inside the VM:
3.  Go to the PHP explorer (left column) and "open" the helloworld project
    Click on it and then select Project - Open Project
4.  Delete the project (since we'll be re-creating it)
    Edit - Delete
    Select "Delete project contents on disk"
5.  Switch workspace to /workspace:
    File - Switch Workspace - Other
6.  You are now ready to create a new project (next)

CREATE LINK TO Zend Tool:
1.  Open a command shell
2.  sudo ln -s /usr/local/zend/share/ZendFramework/bin/zf.sh /usr/bin/zf


CODEBREAK: CREATE PROJECT
Create project from command line or from Zend Studio

From the command line: 
1.    cd /workspace first
2.    zf create project helloworld
3.    If you see any startup errors, check the virtual host file for errors
4.    Import into Zend Studio:
      From ZS: File - New - Zend Framework Project - Zen Framework EMPTY PROJECT

From Zend Studio:
1.    File - New - Zend Framework Project - helloworld

Test in the browser: http://helloworld/


NOTE: 
If you use Zend Tool from the command line, make sure you do REFRESH  Zend Studio!

CODEBREAK: ASSIGN HELLOWORLD TO THE VIEW AND ECHO
1.  Add this code to indexAction() in IndexController.php:
    $this->view->xyz = "Hello World";
2.  Add this code to application/views/scripts/index/index.phtml:
    <h1><?php echo $this->xyz; ?></h1>
3.  Test URL:  http://helloworld/

IndexController.php:
$this->view->test = $this->getRequest()->getParam('test');
View Script:
<?php echo $this->test; ?>
Test from the Browser:
http://helloworld/index/index/test/TEST
NOTE: index controller / index action / param test / value


DAY TWO:

CODEBREAK: M2Ex3

Where the instructions say "Create new Zend Framework Project",
proceed as follows:
1. Issue these two command to gain access to /var/www
     sudo chgrp zend /var/www
     sudo chmod 775 /var/www
2. File - New - Project
3. Select "Local PHP Project"
4. Complete the exercise as homework: we will review it tomorrow

CODEBREAK: BOOTSTRAP INDIVIDUAL ITEMS
1.    Open Bootstrap.php
2.    Create:
    function _initFoo() { echo "<br />Foo\n"; }
    function _initBar() { echo "<br />Bar\n"; }
    function _initBaz() { echo "<br />Baz\n"; echo "<br />\n"; var_dump($this); }
3.    TEST 
   (http://helloworld/ from browser)
4.    Modify last line of index.php:
    $application->getBootstrap()->bootstrap('bar');
    TEST
5.    Modify last line of index.php:
    $application->getBootstrap()->bootstrap(array('bar','baz'));
    TEST
6.    Change everything back to where it was before!!!

CODEBREAK: CREATE NEW CONTROLLER
Create a "demo" controller
1.  From the command line of the VM (or using Zend Tool from inside Studio):
    cd /workspace/helloworld
    zf create controller demo
    -- or --
    From Zend Studio:
    File - New - ZendFramework Item - Controller
2.    In VM browser test this URL: 
    http://helloworld/demo/index

CODEBREAK: CREATE NEW ACTION
Create a "test" action
1.  From the command line of the VM (or using Zend Tool from inside Studio):
    cd /workspace/helloworld
    zf create action test demo
    (or wherever you created your helloworld project -- 
    could be /var/www/helloworld)
    -- or --
    From Zend Studio:
    Open DemoController.php and add testAction() {}
2.  In VM browser test this URL: 
    http://helloworld/demo/test

CODEBREAK: ASSIGN HELLOWORLD TO THE VIEW AND ECHO
1.  Add this code to testAction() in DemoController.php:
    $this->view->xyz = "Hello World";
2.  Add this code to application/views/scripts/demo/test.phtml:
    <h1><?php echo $this->xyz; ?></h1>
3.  Test URL:  http://helloworld/demo/test

CODEBREAK: Read parameters from the URL
Create a "test" action in the index controller
1.  From the command line of the VM (or using Zend Tool from inside Studio):
    cd /workspace/helloworld 
    zf create action test index
2.    In VM browser test this URL: 
    http://helloworld/index/test
3.    From ZS do a refresh and then view IndexController.php
4.    Add code to testAction(): 
    echo $this->getRequest()->getParam("hello");
    // Alternate syntax: echo $this->_getParam("hello");
5.    From browser test this URL:
    http://helloworld/index/demo/hello/Hello%20World
6.    Question: can you echo directly from a controller?    
       What is the best practice?


DAY THREE:

CODEBREAK: Forwarding + preDispatch() and postDispatch()

1.  In helloworld create a new controller dispatch
2.  Add the following methods to DispatchController.php
    public function init() {  echo "<br />Init\n"; }
    public function preDispatch() { echo "<br />Pre Dispatch\n"; }
    public function postDispatch() { echo "<br />Post Dispatch\n"; }
3.  TEST: http://helloworld/dispatch
     indexAction() {
        echo '<br />Index';
     }
4.  Create an action in the dispatch controller called "test"
        echo '<br />Test';
5.  Add this code to indexAction():
        echo '<br />Before Forward';
        $this->_forward("test","dispatch");
        echo '<br />After Forward';
6.  TEST: http://helloworld/dispatch
7.  What is the difference in output?

Q: Does __redirect() work like __forward() in that the remaining code executes before doing the redirect?
A: No.  Add this test code to indexAction():
        echo '<br />Before Redirect';
        $this->_redirect("http://wikiapp/");
        echo '<br />After Redirect';
   TEST: http://helloworld/dispatch


CODEBREAK: CODE GUESTBOOK.WORK
1.    Create the ZF project guestbook.work
2.    Create additional controller(s) as needed
3.    Create additional action(s) as needed
4.    Verify the the project document root is guestbook.work/public in 
    the vhost file /etc/apache2/sites-available/guestbook.work
5.    Test and debug


DAY FOUR:

CODEBREAK: Modify guestbook.work to use Zend_Config

1.	Open index.php
2.	Just before "require_once 'Zend/Application.php' add the following:
	require_once 'Zend/Config/Ini.php';
	$config = new Zend_Config_Ini(APPLICATION_PATH . '/configs/application.ini', APPLICATION_ENV);
3.	Modify the call to Zend_Application as follows:
	$application = new Zend_Application(APPLICATION_ENV, $config);
4.	Test in the browser

CODEBREAK: Read Zend_Config parameters

1.  Add an entry to application.ini in the [Production] section
	version = '1.0.1'
2.  In the index controller, add these four lines of code:
	$options = $this->getFrontController()->getParam('bootstrap')->getOptions();
	$version = $this->getInvokeArg('bootstrap')->getOption('version');
    	$this->view->options = $options;
    	$this->view->version = $version;

	In the view script:
	<?php Zend_Debug::dump($this->options); ?>
	<?php Zend_Debug::dump($this->version); ?>
3.  Test: http://guestbook.work/
4.  Based on the information you see, add code which has the view script display the version number.
5.  When done, remove the var_dump()


CODEBREAK: M5Ex3: prepare guestbook.work for access to the sqlite database:

1.  Copy /workspace/guestbook/data/* to /workspace/guestbook.work/data
2.  Configure Application/configs/application.ini for the sqlite db


CODEBREAK: M5Ex6: use Zend_Session to implement a counter:

1.    In guestbook.work make sure you have a controller called "guestbook" and a "sign" action + corresponding view
2.    Implement a simple form in the sign view:
      <form method=post><input type=submit></form>
3.    Using a simple if / then control structure, implement the following logic:
      A. Get the request object
      B. Is the request a POST?
      C. Implement a page hit counter using Zend_Session_Namespace to store the number of hits
4.    Test and make sure that when you press the button +3x you receive an "exceeded" message.
      NOTE: may have to keep hitting the button quite a few times before the error is generated.
5.    We'll add the rest of the code later!!!


CODEBREAK: M6Ex1: Zend_Db_Profiler

In the layout of the guestbook application:

How to get the database adapter: Zend_Db_Table::getDefaultAdapter()
From the adapter get the profiler
From the profiler get the last query profiles
Use Zend_Debug::dump() to output the data



DAY FIVE:

CODEBREAK: 
Modify the index action in the guestbook controller to produce a list of  
email addresses + comments of those who have signed the guestbook.

Hints:

1.    Create a Zend_Db_Table model
2.    Use the Zend_Db_Select and the fetchAll() method

&&&Student Notes

Here is the structure of the guestbook database:

CREATE TABLE guestbook (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    email VARCHAR(32) NOT NULL DEFAULT 'php',
    comment TEXT NULL,
    created DATETIME NOT NULL
)


&&&Instructor Notes

Modify application/controllers/GuestbookController.php / indexAction() as follows:

    public function indexAction()
    {
        $guestbook = new Default_Model_DbTable_Guestbook();
        $this->view->entries = $guestbook->fetchAll();
    }

Modify application/views/scripts/guestbook/sign/index.phtml as follows:

Guestbook Entries: <br />
<dl>
    <!-- Loop through the entries that were provided to us by the controller -->
    <?php foreach ($this->entries as $entry): ?>
    <dt><?php echo $this->escape($entry->email) ?></dt>
    <dd><?php echo $this->escape($entry->comment) ?></dd>
    <?php endforeach ?>
</dl>

CODEBREAK: Build a Zend_Db_Select object which implements this SQL:

SELECT p.`product_id`, p.`product_name`, l.*
FROM `products` AS p
JOIN `line_items` AS l
ON p.`product_id` = l.`product_id`

Solution (see zend_db_select_exercise.php):

	$select = $db->select()
				 ->from(array('p' => 'products'), array('product_id', 'product_name'))
				 ->join(array('l' => 'line_items'), 'p.product_id = l.product_id');


DAY SIX:

CODE BREAK: code form, captcha, and CRSF element into guestbook.work

1. Look at code complete version of guestbook
2. Which form elements do you need?
3. Code these into a file which should be placed under application/forms
4. Instantiate and validate the form in the guestbook/sign action
5. Insert the email address, comment etc. into the database
6. Use Zend Studio - Window - Open Perspective - Other - Remote System Explorer to 
   browse to guestbook.work/data/db and set write permissions on both the directory and 
   database file

Here is the structure of the guestbook database:

CREATE TABLE guestbook (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    email VARCHAR(32) NOT NULL DEFAULT 'php',
    comment TEXT NULL,
    created DATETIME NOT NULL
)

	OPTIONAL:
	Create an image CAPTCHA

	1. cd /workspace/guestbook.work/public
	2. sudo mkdir captcha
	3. may have to set permissions using Zend Studio - Remote System Explorer (which you can see from "Open Perspective - Other" menu)
	5. mkdir /workspace/guestbook.work/application/fonts
	6. copy the fonts into this directory
		   /workspace/guestbook.work/application/fonts
CAPTCHA image element:
	$captcha = new Zend_Form_Element_Captcha('captcha',
	array(
        'label'      => 'Please enter the 5 letters displayed below:',
        'required'   => true,
        'captcha'    => array('captcha' => 'image',
        'name'       => 'guestbookcaptcha',
        'wordLen'    => 5,
	'font'    	 => APPLICATION_PATH . '/fonts/VeraBd.ttf',
        'fontSize'   => 24,
        'imgDir'     => '/workspace/guestbook.work/public/captcha',
        'imgUrl'     => 'http://guestbook.work/captcha',
        'timeout'    => 300)
        ));

DAY SEVEN:

CODEBREAK: Add a Layout to guestbook.work
1.    Create an application/layouts directory
2.    Create a simple layout script application/layouts/layout.phtml with a link
      to the sign action
3.    Configure application.ini to identify the layout resource path
4.    Configure application.ini to activate the view as a resource
      (this allows you to insert an XHTML doctype)
5.   In your layout, create a link to the sign action in the guestbook controller

HINT: see the code complete guestbook application.ini file

[OPTIONAL]
CODEBREAK: Zend_Registry and Zend_Log
0.    Create a directory to contain the log
1.    In guestbook.work application/Boostrap.php create a method _initLog()
2.    Create a log object and store it in the registry
3.    Locate or create form validation if / then / else clause in guestbook/sign
      and retrieve the log object
4.    For the "then" clause: log "Success" at INFO log level
5.    For the "else" clause: log "Failure" at ALERT log level
6.    Sign the guestbook successfully a couple of times
7.    Enter some wrong values to trigger the failure clause
8.    From Zend Studio, refresh and view the log

CODEBREAK: create an Action Helper
1.    Open the guestbook.work application in Zend Studio
2.    Add an option email = "xyz@test.com" to the application.ini file
3.    Create a folder application/controllers/helpers
4.    In Bootstrap.php create an "_init" method which registers Action Helpers with the Broker:
      Zend_Controller_Action_HelperBroker::addPath(APPLICATION_PATH . '/controllers/helpers');
5.    Use Zend Studio to create an Action Helper "Test" 
      placing the new file in the new folder
6.    Add code to the "direct()" method which returns an array of options from the application.ini file:
	$front = Zend_Controller_Front::getInstance();
	return $front->getParam('bootstrap')->getOptions();
7.    Call the action helper in both the index action of the index controller
      as well as in the index action of the guestbook controller
8.    Send the value of $config['email'] to the layout
9.    In the layout, add a footer: "Contact <?php echo $this->email; ?>"
10.   Test your modifications in the browser



Additional Resources ----------------------------------------------------------------------------
- Don't have " " or "_" in project name: ZS won't create it!!!
- Tutorials:
	http://shiflett.org/blog/2006/mar/zend-framework-tutorial
- In version 1.9 of Zend Framework, a view helper called baseUrl() is available. This helper collects the information we require from the request object and provides us with the bit of the URL that we donʼt know.
- In version 1.8 of Zend Framework, the baseUrl() view helper isnʼt provided, so we create our own.

Rob Allen - Zend Framework in Action (also available as a PDF download for $15 on lulu.com)
Keith Pope - Zend Framework 1.8


IF Zend Tool INSIDE ZEND STUDIO DOESN'T WORK:

In Studio select Window->Preferences
Search for PHP Executables (using the filter)
Add a new entry with the settings in the screenshot
SEE: http://www.unlikelysource.com/images/StudioPrefs.jpg
    Name: Zend Server
    Executable Path: /usr/local/zend/bin/php
    PHP ini File: /usr/local/zend/etc/php.ini
    PHP Debugger: Zend Debugger
Make this the new default


